[2023-11-07T02:05:46.483+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=scheduled__2023-11-04T00:00:00+00:00/task_id=3rd_task permission to 509
[2023-11-07T02:05:46.696+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=scheduled__2023-11-04T00:00:00+00:00/task_id=3rd_task permission to 509
[2023-11-07T02:05:47.217+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: export_google_data_v02.3rd_task scheduled__2023-11-04T00:00:00+00:00 [queued]>
[2023-11-07T02:05:47.285+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: export_google_data_v02.3rd_task scheduled__2023-11-04T00:00:00+00:00 [queued]>
[2023-11-07T02:05:47.287+0000] {taskinstance.py:1361} INFO - Starting attempt 6 of 6
[2023-11-07T02:05:47.351+0000] {taskinstance.py:1382} INFO - Executing <Task(BashOperator): 3rd_task> on 2023-11-04 00:00:00+00:00
[2023-11-07T02:05:47.384+0000] {standard_task_runner.py:57} INFO - Started process 13526 to run task
[2023-11-07T02:05:47.431+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'export_google_data_v02', '3rd_task', 'scheduled__2023-11-04T00:00:00+00:00', '--job-id', '308', '--raw', '--subdir', 'DAGS_FOLDER/export_data.py', '--cfg-path', '/tmp/tmp1j7_0aan']
[2023-11-07T02:05:47.486+0000] {standard_task_runner.py:85} INFO - Job 308: Subtask 3rd_task
[2023-11-07T02:05:47.902+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=scheduled__2023-11-04T00:00:00+00:00/task_id=3rd_task permission to 509
[2023-11-07T02:05:47.915+0000] {task_command.py:416} INFO - Running <TaskInstance: export_google_data_v02.3rd_task scheduled__2023-11-04T00:00:00+00:00 [running]> on host c4630ce72677
[2023-11-07T02:05:48.299+0000] {taskinstance.py:1662} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='Toema' AIRFLOW_CTX_DAG_ID='export_google_data_v02' AIRFLOW_CTX_TASK_ID='3rd_task' AIRFLOW_CTX_EXECUTION_DATE='2023-11-04T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='6' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2023-11-04T00:00:00+00:00'
[2023-11-07T02:05:48.322+0000] {subprocess.py:63} INFO - Tmp dir root location: /tmp
[2023-11-07T02:05:48.334+0000] {subprocess.py:75} INFO - Running command: ['/bin/bash', '-c', 'python /opt/***/dags/src/scripts/export_data.py']
[2023-11-07T02:05:48.399+0000] {subprocess.py:86} INFO - Output:
[2023-11-07T02:06:56.406+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:07:25.096+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:07:40.850+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:07:42.285+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:07:43.858+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-07T02:07:45.344+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:07:45.842+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-07T02:07:45.845+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:45.853+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:45.856+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:45.859+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:45.887+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-07T02:07:45.890+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:45.893+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:45.895+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:45.898+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:45.923+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-07T02:07:45.925+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:45.929+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:45.931+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:45.934+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:45.962+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-07T02:07:45.964+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:45.967+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:45.969+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:45.972+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:46.006+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-07T02:07:46.009+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:46.012+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:46.015+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:46.018+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:46.057+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-07T02:07:46.059+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:46.061+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:46.064+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:46.067+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:46.099+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-07T02:07:46.103+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:46.106+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:46.109+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:46.113+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:46.146+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-07T02:07:46.149+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:46.152+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:46.155+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:46.158+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:46.195+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-07T02:07:46.198+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:46.202+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:46.205+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:46.209+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:46.243+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-07T02:07:46.246+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:46.249+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:46.251+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:46.254+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:46.291+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-07T02:07:46.294+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:46.298+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:46.301+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:46.305+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:46.344+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-07T02:07:46.346+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:46.349+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:46.352+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:46.355+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:46.395+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-07T02:07:46.397+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:46.399+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:46.401+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:46.403+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:46.475+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-07T02:07:46.478+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:46.481+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:46.484+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:46.487+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:46.519+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-07T02:07:46.521+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:46.525+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:46.528+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:46.530+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:46.566+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-07T02:07:46.568+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:46.571+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:46.574+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:46.576+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:46.606+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-07T02:07:46.609+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:07:46.612+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:46.615+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:46.618+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:47.175+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-07T02:07:48.910+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-07T02:07:48.914+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:07:50.447+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-07T02:07:50.450+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:07:51.583+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-07T02:07:51.585+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:07:52.603+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-07T02:07:52.606+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:07:52.615+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:07:53.022+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:07:53.025+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.028+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.031+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.034+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.063+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:07:53.066+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.069+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.073+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.079+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.105+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:07:53.108+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.111+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.113+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.117+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.144+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:07:53.147+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.149+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.152+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.155+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.186+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:07:53.189+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.193+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.196+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.200+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.226+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:07:53.229+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.231+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.239+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.242+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.283+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:07:53.285+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.288+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.292+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.297+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.332+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:07:53.334+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.336+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.339+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.342+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.371+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:07:53.372+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.374+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.377+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.379+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.409+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:07:53.411+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.414+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.417+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.420+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.453+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:07:53.456+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.459+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.463+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.629+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.633+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:07:53.636+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.639+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.643+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.646+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.650+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:07:53.654+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.657+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.661+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.664+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.667+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:07:53.670+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.673+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.676+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.680+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.683+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:07:53.686+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.688+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.692+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.695+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.701+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:07:53.704+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.709+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.712+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.715+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:53.749+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:07:53.752+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:07:53.755+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:07:53.759+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:07:53.762+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:07:54.293+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:07:54.297+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:07:54.890+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:07:54.893+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:07:55.431+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:07:55.436+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:07:55.979+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:07:55.982+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:07:56.524+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:07:56.527+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:07:56.923+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:07:56.927+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:07:57.350+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:07:57.356+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:07:57.656+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:07:57.658+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:07:57.660+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:07:58.471+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-07T02:07:58.475+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-07T02:07:58.479+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-07T02:07:58.481+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-07T02:07:58.565+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-07T02:08:00.720+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:08:00.895+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:08:01.952+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:08:01.955+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:01.958+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:01.960+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:01.963+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.009+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:08:02.013+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.017+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.022+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.026+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.068+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:08:02.071+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.074+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.077+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.081+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.126+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:08:02.129+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.132+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.136+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.139+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.177+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:08:02.179+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.185+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.187+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.191+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.234+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:08:02.237+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.239+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.242+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.244+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.287+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:08:02.290+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.293+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.296+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.301+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.345+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:08:02.348+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.351+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.353+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.357+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.406+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:08:02.411+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.414+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.418+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.424+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.464+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:08:02.467+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.471+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.476+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.482+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.557+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:08:02.560+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.563+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.572+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.579+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.620+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:08:02.623+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.626+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.630+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.634+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.683+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:08:02.689+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.694+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.697+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.704+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.740+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:08:02.743+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.749+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.753+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.757+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.789+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:08:02.793+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.797+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.800+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.804+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.836+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:08:02.839+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.843+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.846+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.851+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:02.893+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:08:02.895+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:02.898+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:02.900+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:02.904+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:03.385+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:08:03.388+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:08:03.979+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:08:03.984+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:04.603+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:08:04.607+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:05.226+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:08:05.229+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:06.015+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:08:06.026+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:06.894+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:08:06.934+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:07.540+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:08:07.544+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:07.990+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:08:07.992+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:07.995+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:08:09.187+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:08:11.317+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-07T02:08:12.888+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:08:13.408+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-07T02:08:13.413+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.416+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.424+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.428+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:13.451+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-07T02:08:13.453+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.456+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.459+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.463+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:13.497+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-07T02:08:13.499+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.502+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.506+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.509+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:13.536+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-07T02:08:13.540+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.545+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.549+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.553+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:13.592+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-07T02:08:13.595+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.598+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.601+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.603+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:13.641+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-07T02:08:13.644+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.647+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.650+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.655+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:13.681+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-07T02:08:13.684+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.686+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.691+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.694+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:13.724+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-07T02:08:13.729+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.733+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.739+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.743+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:13.768+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-07T02:08:13.771+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.775+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.777+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.780+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:13.807+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-07T02:08:13.809+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.814+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.817+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.821+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:13.846+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-07T02:08:13.849+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.853+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.857+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.861+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:13.892+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-07T02:08:13.895+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.898+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.901+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.903+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:13.935+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-07T02:08:13.937+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.941+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.944+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.947+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:13.978+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-07T02:08:13.981+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:13.984+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:13.988+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:13.992+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:14.022+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-07T02:08:14.025+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:14.028+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:14.030+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:14.033+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:14.078+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-07T02:08:14.081+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:14.083+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:14.086+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:14.088+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:14.119+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-07T02:08:14.123+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:08:14.125+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:14.130+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:14.134+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:14.511+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-07T02:08:16.030+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-07T02:08:16.032+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:08:16.929+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-07T02:08:16.932+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:08:18.066+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-07T02:08:18.070+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:08:19.289+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-07T02:08:19.292+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:08:19.303+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:08:19.872+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:08:19.875+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:19.878+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:19.880+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:19.883+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:19.914+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:08:19.917+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:19.919+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:19.922+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:19.924+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:19.955+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:08:19.957+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:19.960+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:19.962+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:19.965+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.002+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:08:20.005+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.008+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.012+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.015+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.057+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:08:20.060+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.063+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.067+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.073+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.115+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:08:20.120+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.125+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.129+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.135+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.183+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:08:20.186+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.189+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.193+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.197+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.253+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:08:20.256+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.260+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.262+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.268+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.313+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:08:20.319+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.324+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.327+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.331+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.361+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:08:20.364+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.371+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.375+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.379+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.417+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:08:20.419+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.423+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.426+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.430+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.464+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:08:20.467+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.471+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.475+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.479+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.514+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:08:20.518+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.522+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.525+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.529+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.565+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:08:20.569+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.571+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.574+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.577+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.609+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:08:20.612+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.615+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.618+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.621+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.654+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:08:20.657+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.661+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.664+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.668+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:20.702+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:08:20.705+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:20.708+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:20.711+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:20.714+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:21.103+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:08:21.106+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:08:21.567+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:08:21.569+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:21.971+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:08:21.974+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:22.387+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:08:22.389+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:22.813+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:08:22.816+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:23.230+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:08:23.233+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:23.626+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:08:23.629+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:23.922+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:08:23.924+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:23.926+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:08:25.669+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-07T02:08:25.672+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-07T02:08:25.674+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-07T02:08:25.677+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-07T02:08:25.731+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-07T02:08:26.657+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:08:26.684+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:08:26.709+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source sweden_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:08:27.592+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:08:28.740+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:08:29.155+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:08:29.158+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.160+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.163+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.166+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.191+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:08:29.194+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.197+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.200+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.202+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.225+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:08:29.227+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.230+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.232+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.235+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.261+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:08:29.264+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.267+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.270+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.273+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.297+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:08:29.299+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.302+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.305+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.309+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.338+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:08:29.342+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.346+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.348+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.353+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.381+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:08:29.384+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.386+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.388+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.392+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.419+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:08:29.422+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.425+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.428+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.430+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.453+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:08:29.456+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.459+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.461+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.464+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.494+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:08:29.497+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.499+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.502+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.505+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.536+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:08:29.539+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.543+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.545+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.549+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.596+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:08:29.599+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.601+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.604+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.607+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.648+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:08:29.652+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.657+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.663+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.666+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.699+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:08:29.703+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.706+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.714+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.719+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.746+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:08:29.750+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.754+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.762+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.766+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.809+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:08:29.812+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.814+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.817+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.820+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:29.846+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:08:29.849+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:08:29.852+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:08:29.855+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:08:29.857+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:08:30.293+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:08:30.296+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:08:30.716+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:08:30.719+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:31.265+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:08:31.271+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:31.929+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:08:31.932+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:32.405+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:08:32.409+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:33.421+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:08:33.425+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:34.308+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:08:34.312+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:34.838+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:08:34.841+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:08:34.844+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:08:35.894+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:08:35.985+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source oxford_policy. load_most_recent_loadable_data will return None.
[2023-11-07T02:09:06.771+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:09:24.554+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:09:49.521+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:09:51.212+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:09:53.029+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-07T02:09:54.216+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:09:54.816+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-07T02:09:54.820+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:54.827+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:54.840+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:54.854+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:54.892+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-07T02:09:54.896+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:54.900+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:54.909+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:54.914+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:54.956+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-07T02:09:54.960+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:54.964+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:54.968+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:54.972+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.049+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-07T02:09:55.055+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.060+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.065+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.069+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.118+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-07T02:09:55.122+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.125+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.129+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.135+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.195+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-07T02:09:55.198+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.202+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.208+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.212+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.258+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-07T02:09:55.261+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.265+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.269+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.272+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.325+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-07T02:09:55.328+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.332+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.335+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.338+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.382+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-07T02:09:55.386+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.388+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.393+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.397+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.439+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-07T02:09:55.442+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.446+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.451+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.455+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.498+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-07T02:09:55.500+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.504+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.507+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.510+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.550+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-07T02:09:55.554+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.557+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.560+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.564+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.598+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-07T02:09:55.601+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.605+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.607+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.611+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.659+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-07T02:09:55.662+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.665+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.669+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.672+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.709+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-07T02:09:55.713+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.716+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.719+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.723+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.758+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-07T02:09:55.760+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.764+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.767+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.771+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:55.806+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-07T02:09:55.809+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:09:55.813+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:55.816+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:55.821+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:56.338+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-07T02:09:57.264+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-23
[2023-11-07T02:09:57.267+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:57.271+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:57.273+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:57.277+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:57.333+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-09
[2023-11-07T02:09:57.336+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:57.340+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:57.343+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:57.346+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:57.405+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-18
[2023-11-07T02:09:57.411+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:57.416+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:57.419+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:57.423+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:57.483+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-11
[2023-11-07T02:09:57.501+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:57.516+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:57.528+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:57.544+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:57.613+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-09
[2023-11-07T02:09:57.617+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:57.619+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:57.623+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:57.627+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:57.671+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-29
[2023-11-07T02:09:57.673+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:57.676+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:57.679+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:57.682+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:57.720+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-14
[2023-11-07T02:09:57.723+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:57.726+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:57.728+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:57.731+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:57.770+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-07
[2023-11-07T02:09:57.774+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:57.777+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:57.780+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:57.783+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:57.814+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-04
[2023-11-07T02:09:57.816+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:57.820+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:57.823+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:57.827+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:57.866+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-30
[2023-11-07T02:09:57.870+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:57.873+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:57.876+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:57.879+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:57.924+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-27
[2023-11-07T02:09:57.927+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:57.931+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:57.934+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:57.936+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:57.974+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-22
[2023-11-07T02:09:57.976+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:57.979+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:57.982+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:57.986+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:58.022+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-17
[2023-11-07T02:09:58.025+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:58.028+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:58.030+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:58.034+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:58.069+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-09
[2023-11-07T02:09:58.073+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:58.078+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:58.081+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:58.084+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:58.123+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-02
[2023-11-07T02:09:58.126+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:58.129+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:58.134+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:58.138+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:58.183+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-31
[2023-11-07T02:09:58.186+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:58.189+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:58.193+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:58.197+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:58.235+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-25
[2023-11-07T02:09:58.237+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:09:58.240+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:09:58.242+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:09:58.245+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:09:58.639+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source ireland_hospitalizations for date 2020-08-04
[2023-11-07T02:09:59.833+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-07T02:09:59.836+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:10:00.910+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-07T02:10:00.912+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:10:02.745+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-07T02:10:02.747+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:10:03.788+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-07T02:10:03.790+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:10:03.803+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:10:04.171+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:10:04.173+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.175+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.177+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.180+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.203+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:10:04.205+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.207+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.209+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.212+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.242+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:10:04.245+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.248+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.251+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.254+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.295+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:10:04.298+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.310+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.312+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.314+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.333+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:10:04.335+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.339+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.341+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.344+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.369+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:10:04.371+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.373+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.375+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.377+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.400+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:10:04.402+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.404+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.406+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.408+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.434+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:10:04.436+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.439+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.441+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.443+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.462+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:10:04.464+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.467+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.470+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.472+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.523+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:10:04.525+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.528+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.531+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.536+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.576+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:10:04.578+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.581+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.583+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.586+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.622+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:10:04.627+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.630+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.633+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.635+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.666+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:10:04.668+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.671+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.674+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.677+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.702+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:10:04.704+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.707+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.709+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.711+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.742+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:10:04.745+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.748+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.751+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.755+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.785+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:10:04.787+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.790+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.793+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.798+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:04.835+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:10:04.838+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:04.841+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:04.843+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:04.847+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:05.485+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:10:05.490+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:10:06.105+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:10:06.108+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:06.712+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:10:06.714+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:07.162+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:10:07.165+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:07.505+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:10:07.507+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:07.808+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:10:07.810+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:08.133+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:10:08.136+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:08.464+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:10:08.466+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:08.470+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:10:09.056+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-07T02:10:09.058+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-07T02:10:09.060+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-07T02:10:09.062+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-07T02:10:09.100+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-07T02:10:09.751+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:10:09.782+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:10:10.284+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:10:10.287+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:10.290+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:10.292+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:10.297+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:10.333+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:10:10.336+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:10.339+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:10.349+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:10.354+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:10.422+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:10:10.425+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:10.428+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:10.431+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:10.437+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:10.487+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:10:10.491+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:10.499+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:10.505+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:10.516+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:10.585+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:10:10.588+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:10.599+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:10.605+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:10.614+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:10.647+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:10:10.650+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:10.663+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:10.676+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:10.681+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:10.734+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:10:10.736+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:10.740+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:10.743+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:10.746+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:10.769+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:10:10.772+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:10.775+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:10.778+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:10.781+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:10.810+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:10:10.813+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:10.816+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:10.819+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:10.823+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:10.856+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:10:10.860+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:10.863+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:10.866+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:10.869+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:10.899+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:10:10.901+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:10.903+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:10.907+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:10.910+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:10.952+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:10:10.954+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:10.955+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:10.958+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:10.960+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:10.999+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:10:11.003+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:11.006+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:11.009+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:11.013+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:11.051+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:10:11.055+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:11.058+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:11.062+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:11.066+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:11.100+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:10:11.102+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:11.106+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:11.111+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:11.115+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:11.144+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:10:11.147+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:11.151+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:11.154+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:11.157+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:11.200+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:10:11.205+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:11.209+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:11.211+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:11.214+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:11.689+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:10:11.693+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:10:12.193+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:10:12.196+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:12.601+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:10:12.603+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:12.916+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:10:12.917+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:13.139+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:10:13.140+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:13.399+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:10:13.402+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:13.800+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:10:13.802+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:14.236+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:10:14.240+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:14.243+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:10:15.532+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:10:17.542+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-07T02:10:18.644+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:10:19.115+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-07T02:10:19.117+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.120+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.123+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.126+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.157+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-07T02:10:19.160+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.164+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.168+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.172+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.193+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-07T02:10:19.194+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.196+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.198+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.199+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.225+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-07T02:10:19.227+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.229+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.233+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.235+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.261+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-07T02:10:19.264+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.266+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.269+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.272+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.304+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-07T02:10:19.306+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.308+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.310+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.313+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.344+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-07T02:10:19.346+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.348+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.351+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.354+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.395+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-07T02:10:19.397+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.400+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.403+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.406+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.438+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-07T02:10:19.440+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.445+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.447+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.452+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.485+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-07T02:10:19.488+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.491+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.494+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.497+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.540+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-07T02:10:19.545+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.550+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.553+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.557+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.588+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-07T02:10:19.591+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.594+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.597+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.601+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.643+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-07T02:10:19.647+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.649+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.653+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.658+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.704+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-07T02:10:19.708+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.717+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.724+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.728+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.766+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-07T02:10:19.770+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.772+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.775+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.778+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.822+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-07T02:10:19.825+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.828+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.832+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.837+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:19.889+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-07T02:10:19.903+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:10:19.908+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:19.916+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:19.922+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:20.445+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-07T02:10:21.558+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-23
[2023-11-07T02:10:21.562+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:21.568+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:21.573+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:21.579+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:21.631+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-09
[2023-11-07T02:10:21.635+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:21.638+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:21.644+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:21.647+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:21.700+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-18
[2023-11-07T02:10:21.703+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:21.707+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:21.714+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:21.722+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:21.773+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-11
[2023-11-07T02:10:21.776+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:21.780+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:21.783+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:21.786+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:21.834+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-09
[2023-11-07T02:10:21.837+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:21.841+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:21.844+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:21.848+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:21.888+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-29
[2023-11-07T02:10:21.892+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:21.895+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:21.904+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:21.908+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:21.962+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-14
[2023-11-07T02:10:21.965+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:21.969+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:21.973+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:21.977+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:22.034+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-07
[2023-11-07T02:10:22.039+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:22.049+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:22.054+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:22.059+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:22.121+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-04
[2023-11-07T02:10:22.124+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:22.139+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:22.144+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:22.153+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:22.222+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-30
[2023-11-07T02:10:22.227+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:22.230+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:22.240+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:22.249+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:22.326+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-27
[2023-11-07T02:10:22.330+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:22.336+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:22.340+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:22.346+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:22.396+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-22
[2023-11-07T02:10:22.400+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:22.403+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:22.409+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:22.420+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:22.481+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-17
[2023-11-07T02:10:22.495+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:22.511+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:22.513+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:22.521+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:22.595+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-09
[2023-11-07T02:10:22.603+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:22.606+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:22.612+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:22.621+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:22.651+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-02
[2023-11-07T02:10:22.665+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:22.673+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:22.677+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:22.682+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:22.722+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-31
[2023-11-07T02:10:22.726+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:22.729+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:22.733+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:22.736+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:22.784+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-25
[2023-11-07T02:10:22.789+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:10:22.794+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:22.805+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:22.809+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:23.338+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source ireland_hospitalizations for date 2020-08-04
[2023-11-07T02:10:24.842+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-07T02:10:24.845+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:10:26.517+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-07T02:10:26.521+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:10:28.092+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-07T02:10:28.096+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:10:29.451+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-07T02:10:29.454+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:10:29.465+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:10:29.759+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:10:29.761+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:29.763+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:29.766+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:29.769+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:29.796+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:10:29.799+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:29.801+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:29.804+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:29.807+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:29.846+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:10:29.849+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:29.852+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:29.855+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:29.858+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:29.890+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:10:29.894+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:29.896+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:29.899+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:29.902+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:29.939+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:10:29.942+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:29.946+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:29.949+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:29.954+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:29.990+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:10:29.994+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:29.997+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:29.999+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:30.001+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:30.038+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:10:30.040+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:30.042+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:30.046+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:30.049+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:30.082+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:10:30.085+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:30.087+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:30.090+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:30.094+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:30.136+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:10:30.140+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:30.144+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:30.148+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:30.151+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:30.178+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:10:30.181+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:30.185+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:30.188+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:30.196+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:30.221+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:10:30.224+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:30.227+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:30.231+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:30.234+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:30.269+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:10:30.272+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:30.278+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:30.282+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:30.289+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:30.316+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:10:30.318+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:30.321+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:30.323+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:30.327+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:30.364+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:10:30.367+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:30.370+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:30.373+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:30.376+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:30.407+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:10:30.410+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:30.413+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:30.418+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:30.420+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:30.447+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:10:30.450+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:30.452+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:30.454+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:30.456+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:30.487+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:10:30.490+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:30.492+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:30.497+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:30.499+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:30.839+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:10:30.841+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:10:31.163+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:10:31.166+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:31.502+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:10:31.505+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:31.866+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:10:31.869+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:32.255+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:10:32.258+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:32.574+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:10:32.576+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:32.891+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:10:32.893+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:33.217+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:10:33.220+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:33.224+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:10:33.793+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-07T02:10:33.794+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-07T02:10:33.796+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-07T02:10:33.798+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-07T02:10:33.832+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-07T02:10:34.422+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:10:34.446+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:10:34.468+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source sweden_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:10:35.348+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:10:36.290+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:10:36.739+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:10:36.742+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:36.746+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:36.748+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:36.751+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:36.781+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:10:36.784+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:36.786+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:36.790+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:36.793+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:36.827+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:10:36.830+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:36.834+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:36.837+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:36.840+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:36.872+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:10:36.877+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:36.883+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:36.886+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:36.890+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:36.920+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:10:36.922+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:36.925+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:36.927+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:36.930+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:36.959+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:10:36.961+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:36.963+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:36.965+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:36.967+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:36.992+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:10:36.994+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:36.997+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:36.999+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:37.002+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:37.028+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:10:37.030+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:37.032+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:37.035+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:37.037+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:37.065+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:10:37.068+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:37.070+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:37.073+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:37.075+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:37.103+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:10:37.106+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:37.109+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:37.112+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:37.115+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:37.143+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:10:37.146+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:37.149+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:37.153+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:37.156+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:37.187+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:10:37.190+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:37.192+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:37.195+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:37.197+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:37.225+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:10:37.227+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:37.229+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:37.233+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:37.236+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:37.263+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:10:37.265+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:37.268+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:37.272+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:37.275+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:37.299+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:10:37.302+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:37.305+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:37.308+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:37.312+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:37.338+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:10:37.341+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:37.345+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:37.347+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:37.350+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:37.373+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:10:37.376+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:10:37.379+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:10:37.381+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:10:37.385+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:10:37.697+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:10:37.700+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:10:38.028+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:10:38.032+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:38.366+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:10:38.368+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:38.649+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:10:38.652+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:39.050+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:10:39.054+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:39.521+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:10:39.524+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:39.987+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:10:39.990+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:40.433+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:10:40.437+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:10:40.441+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:10:41.429+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:10:41.480+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source oxford_policy. load_most_recent_loadable_data will return None.
[2023-11-07T02:11:20.077+0000] {subprocess.py:97} INFO - Command exited with return code -9
[2023-11-07T02:11:22.410+0000] {taskinstance.py:1937} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/operators/bash.py", line 210, in execute
    raise AirflowException(
airflow.exceptions.AirflowException: Bash command failed. The command returned a non-zero exit code -9.
[2023-11-07T02:11:22.686+0000] {taskinstance.py:1400} INFO - Marking task as FAILED. dag_id=export_google_data_v02, task_id=3rd_task, execution_date=20231104T000000, start_date=20231107T020547, end_date=20231107T021122
[2023-11-07T02:11:23.242+0000] {standard_task_runner.py:104} ERROR - Failed to execute job 308 for task 3rd_task (Bash command failed. The command returned a non-zero exit code -9.; 13526)
[2023-11-07T02:11:23.363+0000] {local_task_job_runner.py:228} INFO - Task exited with return code 1
[2023-11-07T02:11:23.868+0000] {taskinstance.py:2778} INFO - 0 downstream tasks scheduled from follow-on schedule check
