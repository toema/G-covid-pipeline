[2023-11-07T01:59:26.122+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=manual__2023-11-07T01:31:27.646283+00:00/task_id=3rd_task permission to 509
[2023-11-07T01:59:26.281+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=manual__2023-11-07T01:31:27.646283+00:00/task_id=3rd_task permission to 509
[2023-11-07T01:59:26.715+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: export_google_data_v02.3rd_task manual__2023-11-07T01:31:27.646283+00:00 [queued]>
[2023-11-07T01:59:26.783+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: export_google_data_v02.3rd_task manual__2023-11-07T01:31:27.646283+00:00 [queued]>
[2023-11-07T01:59:26.785+0000] {taskinstance.py:1361} INFO - Starting attempt 3 of 6
[2023-11-07T01:59:26.851+0000] {taskinstance.py:1382} INFO - Executing <Task(BashOperator): 3rd_task> on 2023-11-07 01:31:27.646283+00:00
[2023-11-07T01:59:26.872+0000] {standard_task_runner.py:57} INFO - Started process 13363 to run task
[2023-11-07T01:59:26.889+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'export_google_data_v02', '3rd_task', 'manual__2023-11-07T01:31:27.646283+00:00', '--job-id', '305', '--raw', '--subdir', 'DAGS_FOLDER/export_data.py', '--cfg-path', '/tmp/tmptpgxn7bg']
[2023-11-07T01:59:26.920+0000] {standard_task_runner.py:85} INFO - Job 305: Subtask 3rd_task
[2023-11-07T01:59:27.163+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=manual__2023-11-07T01:31:27.646283+00:00/task_id=3rd_task permission to 509
[2023-11-07T01:59:27.174+0000] {task_command.py:416} INFO - Running <TaskInstance: export_google_data_v02.3rd_task manual__2023-11-07T01:31:27.646283+00:00 [running]> on host c4630ce72677
[2023-11-07T01:59:27.510+0000] {taskinstance.py:1662} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='Toema' AIRFLOW_CTX_DAG_ID='export_google_data_v02' AIRFLOW_CTX_TASK_ID='3rd_task' AIRFLOW_CTX_EXECUTION_DATE='2023-11-07T01:31:27.646283+00:00' AIRFLOW_CTX_TRY_NUMBER='3' AIRFLOW_CTX_DAG_RUN_ID='manual__2023-11-07T01:31:27.646283+00:00'
[2023-11-07T01:59:27.516+0000] {subprocess.py:63} INFO - Tmp dir root location: /tmp
[2023-11-07T01:59:27.535+0000] {subprocess.py:75} INFO - Running command: ['/bin/bash', '-c', 'python /opt/***/dags/src/scripts/export_data.py']
[2023-11-07T01:59:27.581+0000] {subprocess.py:86} INFO - Output:
[2023-11-07T02:00:06.105+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:00:16.674+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:00:26.737+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:00:27.480+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:00:28.210+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-07T02:00:29.136+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:00:29.535+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-07T02:00:29.537+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:29.540+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:29.543+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:29.546+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:29.567+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-07T02:00:29.570+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:29.572+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:29.574+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:29.577+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:29.609+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-07T02:00:29.611+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:29.613+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:29.615+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:29.617+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:29.644+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-07T02:00:29.646+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:29.648+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:29.650+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:29.652+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:29.684+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-07T02:00:29.687+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:29.690+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:29.692+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:29.695+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:29.724+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-07T02:00:29.727+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:29.730+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:29.733+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:29.736+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:29.763+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-07T02:00:29.765+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:29.767+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:29.769+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:29.772+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:29.808+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-07T02:00:29.811+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:29.813+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:29.816+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:29.818+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:29.844+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-07T02:00:29.847+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:29.849+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:29.852+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:29.854+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:29.882+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-07T02:00:29.886+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:29.888+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:29.892+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:29.895+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:29.924+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-07T02:00:29.927+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:29.930+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:29.932+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:29.935+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:29.965+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-07T02:00:29.969+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:29.972+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:29.975+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:29.978+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:30.009+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-07T02:00:30.011+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:30.014+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:30.016+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:30.019+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:30.045+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-07T02:00:30.047+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:30.050+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:30.052+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:30.055+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:30.078+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-07T02:00:30.081+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:30.083+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:30.086+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:30.089+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:30.110+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-07T02:00:30.113+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:30.115+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:30.118+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:30.121+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:30.154+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-07T02:00:30.156+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:30.158+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:30.160+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:30.163+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:30.447+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-07T02:00:31.383+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-07T02:00:31.384+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:00:32.303+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-07T02:00:32.305+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:00:33.346+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-07T02:00:33.349+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:00:34.441+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-07T02:00:34.444+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:00:34.457+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:00:34.699+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:00:34.701+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:34.702+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:34.704+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:34.706+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:34.738+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:00:34.740+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:34.742+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:34.744+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:34.746+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:34.785+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:00:34.788+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:34.791+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:34.794+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:34.799+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:34.828+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:00:34.830+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:34.832+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:34.835+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:34.838+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:34.867+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:00:34.869+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:34.872+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:34.875+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:34.877+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:34.909+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:00:34.911+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:34.914+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:34.917+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:34.919+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:34.947+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:00:34.950+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:34.954+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:34.956+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:34.959+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:34.990+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:00:34.993+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:34.995+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:34.997+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:35.000+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:35.023+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:00:35.025+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:35.027+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:35.029+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:35.031+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:35.063+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:00:35.066+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:35.069+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:35.072+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:35.074+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:35.109+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:00:35.113+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:35.116+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:35.119+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:35.123+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:35.159+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:00:35.163+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:35.165+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:35.169+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:35.171+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:35.197+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:00:35.200+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:35.203+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:35.205+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:35.208+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:35.238+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:00:35.241+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:35.243+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:35.246+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:35.249+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:35.275+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:00:35.278+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:35.281+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:35.283+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:35.285+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:35.316+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:00:35.319+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:35.321+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:35.323+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:35.326+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:35.349+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:00:35.352+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:35.354+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:35.356+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:35.359+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:35.680+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:00:35.682+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:00:35.987+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:00:35.990+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:36.271+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:00:36.273+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:36.564+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:00:36.566+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:36.870+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:00:36.872+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:37.228+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:00:37.231+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:37.536+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:00:37.538+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:37.835+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:00:37.837+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:37.840+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:00:38.327+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-07T02:00:38.328+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-07T02:00:38.331+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-07T02:00:38.333+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-07T02:00:38.362+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-07T02:00:38.802+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:00:38.826+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:00:39.089+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:00:39.090+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.092+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.093+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.095+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.117+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:00:39.118+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.120+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.121+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.123+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.139+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:00:39.140+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.141+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.143+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.144+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.168+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:00:39.170+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.172+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.174+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.176+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.192+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:00:39.193+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.194+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.195+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.197+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.218+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:00:39.220+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.222+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.223+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.226+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.264+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:00:39.266+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.268+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.269+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.271+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.291+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:00:39.293+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.295+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.297+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.299+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.327+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:00:39.329+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.331+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.333+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.335+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.356+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:00:39.358+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.360+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.362+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.364+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.381+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:00:39.383+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.385+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.386+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.388+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.408+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:00:39.409+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.411+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.413+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.415+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.432+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:00:39.433+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.435+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.436+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.438+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.459+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:00:39.461+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.462+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.464+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.465+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.485+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:00:39.486+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.488+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.490+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.492+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.507+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:00:39.509+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.511+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.512+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.514+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.536+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:00:39.538+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:39.540+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:39.542+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:39.545+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:39.790+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:00:39.791+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:00:40.112+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:00:40.114+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:40.426+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:00:40.428+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:40.788+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:00:40.789+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:41.077+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:00:41.079+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:41.403+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:00:41.405+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:41.735+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:00:41.737+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:42.036+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:00:42.038+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:42.040+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:00:42.867+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:00:43.667+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-07T02:00:44.529+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:00:44.949+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-07T02:00:44.951+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:44.953+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:44.956+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:44.959+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.000+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-07T02:00:45.003+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.006+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.012+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.015+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.067+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-07T02:00:45.070+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.074+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.079+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.083+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.126+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-07T02:00:45.129+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.132+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.136+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.140+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.181+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-07T02:00:45.184+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.187+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.190+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.194+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.248+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-07T02:00:45.251+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.254+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.257+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.260+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.298+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-07T02:00:45.301+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.304+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.306+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.309+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.351+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-07T02:00:45.353+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.356+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.359+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.361+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.395+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-07T02:00:45.398+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.401+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.403+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.406+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.435+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-07T02:00:45.437+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.440+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.443+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.446+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.479+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-07T02:00:45.481+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.483+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.485+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.488+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.521+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-07T02:00:45.523+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.526+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.528+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.530+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.558+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-07T02:00:45.561+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.563+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.565+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.568+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.599+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-07T02:00:45.602+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.604+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.607+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.611+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.644+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-07T02:00:45.647+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.650+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.652+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.655+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.687+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-07T02:00:45.690+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.692+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.695+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.698+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:45.734+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-07T02:00:45.737+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:00:45.740+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:45.742+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:45.745+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:46.137+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-07T02:00:47.286+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-07T02:00:47.288+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:00:48.267+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-07T02:00:48.269+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:00:49.097+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-07T02:00:49.100+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:00:50.548+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-07T02:00:50.551+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:00:50.565+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:00:51.518+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:00:51.521+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:51.526+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:51.530+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:51.535+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:51.578+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:00:51.582+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:51.586+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:51.590+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:51.593+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:51.624+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:00:51.627+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:51.631+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:51.635+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:51.641+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:51.674+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:00:51.677+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:51.680+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:51.683+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:51.686+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:51.716+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:00:51.721+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:51.727+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:51.731+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:51.736+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:51.772+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:00:51.774+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:51.776+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:51.778+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:51.780+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:51.807+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:00:51.809+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:51.812+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:51.814+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:51.817+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:51.845+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:00:51.847+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:51.849+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:51.852+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:51.854+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:51.882+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:00:51.884+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:51.887+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:51.889+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:51.891+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:51.921+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:00:51.923+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:51.927+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:51.930+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:51.933+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:51.973+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:00:51.975+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:51.979+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:51.982+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:51.985+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:52.030+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:00:52.034+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:52.045+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:52.052+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:52.055+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:52.096+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:00:52.100+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:52.105+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:52.110+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:52.114+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:52.152+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:00:52.155+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:52.159+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:52.162+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:52.165+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:52.196+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:00:52.200+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:52.202+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:52.205+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:52.207+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:52.237+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:00:52.240+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:52.242+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:52.246+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:52.248+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:52.289+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:00:52.293+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:52.296+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:52.299+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:52.303+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:52.679+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:00:52.681+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:00:53.043+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:00:53.045+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:53.400+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:00:53.402+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:53.833+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:00:53.835+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:54.191+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:00:54.194+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:54.505+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:00:54.507+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:54.786+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:00:54.789+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:55.109+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:00:55.112+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:00:55.114+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:00:56.249+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-07T02:00:56.252+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-07T02:00:56.253+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-07T02:00:56.256+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-07T02:00:56.297+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-07T02:00:57.030+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:00:57.068+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:00:57.115+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source sweden_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:00:58.165+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:00:59.377+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:00:59.776+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:00:59.778+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:59.780+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:59.782+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:59.784+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:59.806+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:00:59.808+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:59.810+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:59.811+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:59.813+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:59.843+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:00:59.844+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:59.846+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:59.849+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:59.851+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:59.881+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:00:59.884+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:59.886+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:59.888+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:59.890+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:59.915+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:00:59.917+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:59.920+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:59.922+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:59.925+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:59.957+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:00:59.959+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:59.960+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:59.962+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:00:59.965+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:00:59.993+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:00:59.995+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:00:59.997+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:00:59.999+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:00.002+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:00.045+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:01:00.048+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:01:00.051+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:00.054+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:00.057+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:00.094+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:01:00.096+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:01:00.101+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:00.104+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:00.108+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:00.139+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:01:00.142+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:01:00.144+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:00.146+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:00.149+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:00.173+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:01:00.175+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:01:00.177+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:00.179+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:00.181+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:00.205+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:01:00.207+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:01:00.209+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:00.212+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:00.214+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:00.240+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:01:00.242+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:01:00.244+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:00.248+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:00.251+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:00.283+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:01:00.286+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:01:00.288+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:00.292+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:00.296+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:00.327+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:01:00.330+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:01:00.333+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:00.336+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:00.338+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:00.369+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:01:00.372+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:01:00.374+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:00.377+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:00.381+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:00.411+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:01:00.413+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:01:00.415+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:00.418+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:00.421+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:00.705+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:01:00.708+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:01:01.075+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:01:01.078+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:01:01.497+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:01:01.499+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:01:01.825+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:01:01.827+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:01:02.158+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:01:02.161+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:01:02.549+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:01:02.554+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:01:02.943+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:01:02.946+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:01:03.370+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:01:03.373+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:01:03.375+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:01:04.197+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:01:04.238+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source oxford_policy. load_most_recent_loadable_data will return None.
[2023-11-07T02:01:24.103+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:01:36.307+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:01:49.982+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:01:51.544+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:01:53.025+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-07T02:01:54.343+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:01:54.887+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-07T02:01:54.890+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:54.894+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:54.901+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:54.905+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:54.946+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-07T02:01:54.949+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:54.951+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:54.954+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:54.957+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:54.999+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-07T02:01:55.002+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.004+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.011+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.014+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.058+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-07T02:01:55.060+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.063+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.066+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.069+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.115+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-07T02:01:55.118+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.120+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.122+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.125+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.158+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-07T02:01:55.161+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.164+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.168+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.171+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.203+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-07T02:01:55.205+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.209+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.212+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.215+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.253+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-07T02:01:55.257+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.259+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.262+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.264+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.292+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-07T02:01:55.294+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.296+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.299+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.301+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.329+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-07T02:01:55.332+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.334+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.337+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.341+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.388+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-07T02:01:55.391+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.394+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.397+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.400+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.441+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-07T02:01:55.444+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.447+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.451+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.454+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.495+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-07T02:01:55.498+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.501+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.504+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.507+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.551+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-07T02:01:55.554+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.560+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.563+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.567+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.629+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-07T02:01:55.632+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.638+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.642+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.645+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.686+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-07T02:01:55.689+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.692+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.695+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.701+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:55.741+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-07T02:01:55.745+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:01:55.749+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:55.752+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:55.756+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:56.261+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-07T02:01:57.204+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-23
[2023-11-07T02:01:57.208+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.214+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.217+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.221+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.275+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-09
[2023-11-07T02:01:57.278+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.284+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.294+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.297+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.334+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-18
[2023-11-07T02:01:57.338+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.341+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.345+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.349+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.393+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-11
[2023-11-07T02:01:57.398+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.402+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.405+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.410+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.456+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-09
[2023-11-07T02:01:57.459+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.462+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.465+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.469+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.504+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-29
[2023-11-07T02:01:57.507+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.510+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.513+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.516+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.550+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-14
[2023-11-07T02:01:57.554+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.556+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.559+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.562+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.592+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-07
[2023-11-07T02:01:57.594+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.597+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.601+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.603+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.633+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-04
[2023-11-07T02:01:57.636+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.639+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.643+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.647+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.680+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-30
[2023-11-07T02:01:57.683+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.685+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.688+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.691+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.719+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-27
[2023-11-07T02:01:57.722+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.725+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.728+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.731+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.762+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-22
[2023-11-07T02:01:57.764+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.767+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.770+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.772+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.813+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-17
[2023-11-07T02:01:57.815+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.818+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.822+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.825+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.859+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-09
[2023-11-07T02:01:57.861+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.865+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.867+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.870+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.907+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-02
[2023-11-07T02:01:57.910+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.913+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.916+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.918+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:57.954+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-31
[2023-11-07T02:01:57.957+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:57.961+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:57.966+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:57.971+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:58.014+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-25
[2023-11-07T02:01:58.017+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:01:58.021+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:01:58.024+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:01:58.027+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:01:58.464+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source ireland_hospitalizations for date 2020-08-04
[2023-11-07T02:01:59.927+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-07T02:01:59.930+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:02:01.114+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-07T02:02:01.117+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:02:02.390+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-07T02:02:02.393+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:02:03.566+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-07T02:02:03.569+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:02:03.579+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:02:04.076+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:02:04.079+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.082+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.086+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.089+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.131+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:02:04.135+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.137+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.142+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.145+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.190+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:02:04.193+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.196+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.199+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.203+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.237+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:02:04.241+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.244+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.248+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.252+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.286+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:02:04.289+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.292+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.297+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.309+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.357+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:02:04.361+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.364+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.373+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.376+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.415+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:02:04.418+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.421+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.424+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.427+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.467+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:02:04.470+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.474+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.477+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.481+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.515+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:02:04.518+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.520+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.524+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.527+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.561+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:02:04.564+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.567+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.570+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.574+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.611+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:02:04.614+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.617+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.622+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.627+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.660+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:02:04.664+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.667+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.672+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.675+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.711+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:02:04.714+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.719+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.722+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.725+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.766+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:02:04.769+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.773+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.776+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.781+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.817+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:02:04.820+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.823+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.827+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.830+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.872+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:02:04.876+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.880+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.884+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.887+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:04.921+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:02:04.929+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:04.935+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:04.941+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:04.945+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:05.414+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:02:05.416+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:02:05.835+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:02:05.838+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:06.274+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:02:06.277+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:06.733+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:02:06.737+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:07.404+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:02:07.406+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:07.932+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:02:07.935+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:08.396+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:02:08.405+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:08.856+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:02:08.861+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:08.865+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:02:09.956+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-07T02:02:09.960+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-07T02:02:09.964+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-07T02:02:09.969+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-07T02:02:10.039+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-07T02:02:10.814+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:02:10.837+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:02:11.274+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:02:11.279+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.282+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.286+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.290+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.318+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:02:11.321+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.324+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.327+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.331+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.366+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:02:11.369+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.373+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.375+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.380+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.405+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:02:11.409+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.411+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.417+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.421+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.444+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:02:11.447+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.450+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.454+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.458+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.485+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:02:11.488+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.491+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.498+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.501+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.523+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:02:11.526+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.530+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.534+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.537+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.565+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:02:11.568+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.571+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.574+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.577+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.602+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:02:11.605+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.608+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.612+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.614+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.638+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:02:11.641+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.643+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.646+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.650+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.676+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:02:11.679+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.683+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.687+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.690+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.719+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:02:11.722+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.726+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.730+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.733+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.760+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:02:11.763+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.767+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.770+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.774+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.800+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:02:11.804+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.809+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.814+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.821+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.852+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:02:11.856+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.861+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.866+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.872+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.905+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:02:11.909+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.915+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.919+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.925+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:11.954+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:02:11.959+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:11.964+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:11.968+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:11.971+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:12.351+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:02:12.353+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:02:12.707+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:02:12.709+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:13.021+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:02:13.024+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:13.345+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:02:13.346+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:13.744+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:02:13.747+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:14.096+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:02:14.098+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:14.402+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:02:14.404+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:14.746+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:02:14.748+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:14.751+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:02:15.669+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:02:16.694+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-07T02:02:17.585+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:02:18.059+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-07T02:02:18.062+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.065+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.068+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.071+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.105+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-07T02:02:18.109+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.112+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.117+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.120+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.156+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-07T02:02:18.160+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.163+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.167+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.170+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.206+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-07T02:02:18.210+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.214+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.218+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.222+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.261+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-07T02:02:18.264+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.267+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.269+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.272+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.305+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-07T02:02:18.308+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.312+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.315+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.319+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.347+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-07T02:02:18.350+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.353+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.356+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.358+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.388+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-07T02:02:18.391+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.394+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.396+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.399+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.431+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-07T02:02:18.434+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.437+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.440+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.443+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.478+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-07T02:02:18.481+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.485+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.488+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.490+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.521+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-07T02:02:18.523+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.526+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.529+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.533+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.569+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-07T02:02:18.572+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.575+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.578+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.581+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.607+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-07T02:02:18.609+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.612+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.614+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.617+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.649+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-07T02:02:18.651+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.654+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.658+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.661+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.696+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-07T02:02:18.699+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.701+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.704+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.706+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.736+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-07T02:02:18.738+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.741+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.744+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.747+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:18.779+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-07T02:02:18.782+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:18.784+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:18.788+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:18.792+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:19.179+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-07T02:02:19.731+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-23
[2023-11-07T02:02:19.740+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:19.746+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:19.754+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:19.758+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:19.789+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-09
[2023-11-07T02:02:19.792+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:19.795+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:19.797+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:19.801+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:19.835+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-18
[2023-11-07T02:02:19.838+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:19.840+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:19.843+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:19.846+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:19.875+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-11
[2023-11-07T02:02:19.878+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:19.882+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:19.885+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:19.888+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:19.916+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-09
[2023-11-07T02:02:19.919+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:19.922+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:19.925+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:19.929+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:19.955+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-29
[2023-11-07T02:02:19.958+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:19.962+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:19.965+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:19.969+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:19.991+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-14
[2023-11-07T02:02:19.994+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:19.997+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:20.000+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:20.004+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:20.027+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-07
[2023-11-07T02:02:20.030+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:20.033+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:20.036+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:20.039+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:20.064+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-04
[2023-11-07T02:02:20.067+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:20.069+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:20.073+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:20.076+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:20.118+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-30
[2023-11-07T02:02:20.121+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:20.125+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:20.128+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:20.132+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:20.171+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-27
[2023-11-07T02:02:20.175+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:20.178+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:20.182+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:20.185+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:20.213+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-22
[2023-11-07T02:02:20.215+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:20.217+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:20.220+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:20.223+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:20.255+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-17
[2023-11-07T02:02:20.258+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:20.261+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:20.263+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:20.266+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:20.298+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-09
[2023-11-07T02:02:20.301+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:20.305+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:20.308+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:20.311+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:20.341+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-02
[2023-11-07T02:02:20.344+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:20.347+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:20.349+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:20.352+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:20.386+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-31
[2023-11-07T02:02:20.391+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:20.395+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:20.401+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:20.405+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:20.448+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-25
[2023-11-07T02:02:20.452+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:02:20.455+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:20.458+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:20.460+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:21.102+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source ireland_hospitalizations for date 2020-08-04
[2023-11-07T02:02:22.688+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-07T02:02:22.691+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:02:23.867+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-07T02:02:23.869+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:02:25.095+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-07T02:02:25.098+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:02:26.413+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-07T02:02:26.416+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:02:26.429+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:02:26.944+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:02:26.947+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:26.950+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:26.954+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:26.957+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:26.996+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:02:27.013+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.032+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.036+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.043+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.072+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:02:27.075+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.077+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.080+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.083+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.121+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:02:27.125+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.129+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.133+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.135+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.168+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:02:27.170+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.173+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.176+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.179+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.208+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:02:27.211+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.214+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.218+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.221+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.255+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:02:27.257+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.261+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.263+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.266+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.298+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:02:27.301+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.304+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.307+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.310+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.339+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:02:27.342+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.345+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.347+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.351+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.383+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:02:27.385+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.388+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.391+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.393+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.419+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:02:27.421+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.423+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.426+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.428+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.451+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:02:27.453+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.456+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.460+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.462+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.488+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:02:27.490+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.493+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.496+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.499+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.528+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:02:27.530+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.533+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.537+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.539+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.570+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:02:27.573+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.576+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.579+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.582+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.620+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:02:27.623+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.627+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.632+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.635+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:27.667+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:02:27.670+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:27.672+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:27.676+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:27.678+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:28.072+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:02:28.074+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:02:28.471+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:02:28.473+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:28.891+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:02:28.894+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:29.297+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:02:29.300+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:29.689+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:02:29.693+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:30.180+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:02:30.183+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:30.574+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:02:30.577+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:30.986+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:02:30.989+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:30.991+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:02:31.837+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-07T02:02:31.839+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-07T02:02:31.842+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-07T02:02:31.845+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-07T02:02:31.893+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-07T02:02:32.689+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:02:32.717+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:02:32.742+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source sweden_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:02:33.873+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:02:35.531+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:02:36.358+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:02:36.363+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:36.369+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:36.375+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:36.381+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:36.412+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:02:36.415+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:36.418+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:36.420+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:36.424+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:36.472+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:02:36.475+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:36.478+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:36.481+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:36.485+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:36.521+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:02:36.525+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:36.529+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:36.532+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:36.535+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:36.576+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:02:36.580+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:36.582+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:36.586+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:36.590+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:36.632+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:02:36.638+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:36.647+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:36.652+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:36.657+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:36.702+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:02:36.709+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:36.713+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:36.731+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:36.735+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:36.772+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:02:36.775+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:36.779+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:36.783+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:36.787+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:36.826+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:02:36.829+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:36.832+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:36.835+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:36.838+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:36.869+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:02:36.872+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:36.875+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:36.878+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:36.881+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:36.914+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:02:36.917+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:36.919+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:36.922+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:36.925+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:36.966+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:02:36.969+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:36.972+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:36.975+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:36.977+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:37.025+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:02:37.028+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:37.032+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:37.035+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:37.044+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:37.083+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:02:37.086+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:37.090+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:37.093+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:37.096+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:37.153+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:02:37.174+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:37.182+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:37.186+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:37.193+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:37.231+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:02:37.234+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:37.238+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:37.246+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:37.250+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:37.303+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:02:37.306+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:02:37.311+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:37.328+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:37.332+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:37.928+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:02:37.932+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:02:38.546+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:02:38.549+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:39.208+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:02:39.212+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:39.861+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:02:39.864+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:40.515+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:02:40.520+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:41.143+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:02:41.145+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:41.741+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:02:41.745+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:42.295+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:02:42.300+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:02:42.306+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:02:43.606+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:02:43.656+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source oxford_policy. load_most_recent_loadable_data will return None.
[2023-11-07T02:03:30.049+0000] {subprocess.py:97} INFO - Command exited with return code -9
[2023-11-07T02:03:30.872+0000] {taskinstance.py:1937} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/operators/bash.py", line 210, in execute
    raise AirflowException(
airflow.exceptions.AirflowException: Bash command failed. The command returned a non-zero exit code -9.
[2023-11-07T02:03:31.051+0000] {taskinstance.py:1400} INFO - Marking task as UP_FOR_RETRY. dag_id=export_google_data_v02, task_id=3rd_task, execution_date=20231107T013127, start_date=20231107T015926, end_date=20231107T020330
[2023-11-07T02:03:31.508+0000] {standard_task_runner.py:104} ERROR - Failed to execute job 305 for task 3rd_task (Bash command failed. The command returned a non-zero exit code -9.; 13363)
[2023-11-07T02:03:31.614+0000] {local_task_job_runner.py:228} INFO - Task exited with return code 1
[2023-11-07T02:03:32.404+0000] {taskinstance.py:2778} INFO - 0 downstream tasks scheduled from follow-on schedule check
