[2023-11-09T02:18:44.327+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=manual__2023-11-07T01:31:27.646283+00:00/task_id=3rd_task permission to 509
[2023-11-09T02:18:44.434+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=manual__2023-11-07T01:31:27.646283+00:00/task_id=3rd_task permission to 509
[2023-11-09T02:18:44.505+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: export_google_data_v02.3rd_task manual__2023-11-07T01:31:27.646283+00:00 [queued]>
[2023-11-09T02:18:44.529+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: export_google_data_v02.3rd_task manual__2023-11-07T01:31:27.646283+00:00 [queued]>
[2023-11-09T02:18:44.531+0000] {taskinstance.py:1361} INFO - Starting attempt 6 of 6
[2023-11-09T02:18:44.560+0000] {taskinstance.py:1382} INFO - Executing <Task(BashOperator): 3rd_task> on 2023-11-07 01:31:27.646283+00:00
[2023-11-09T02:18:44.569+0000] {standard_task_runner.py:57} INFO - Started process 8382 to run task
[2023-11-09T02:18:44.575+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'export_google_data_v02', '3rd_task', 'manual__2023-11-07T01:31:27.646283+00:00', '--job-id', '477', '--raw', '--subdir', 'DAGS_FOLDER/export_data.py', '--cfg-path', '/tmp/tmp0986r3tx']
[2023-11-09T02:18:44.581+0000] {standard_task_runner.py:85} INFO - Job 477: Subtask 3rd_task
[2023-11-09T02:18:44.672+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=manual__2023-11-07T01:31:27.646283+00:00/task_id=3rd_task permission to 509
[2023-11-09T02:18:44.682+0000] {task_command.py:416} INFO - Running <TaskInstance: export_google_data_v02.3rd_task manual__2023-11-07T01:31:27.646283+00:00 [running]> on host a4fee2fb2c17
[2023-11-09T02:18:44.826+0000] {taskinstance.py:1662} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='Toema' AIRFLOW_CTX_DAG_ID='export_google_data_v02' AIRFLOW_CTX_TASK_ID='3rd_task' AIRFLOW_CTX_EXECUTION_DATE='2023-11-07T01:31:27.646283+00:00' AIRFLOW_CTX_TRY_NUMBER='6' AIRFLOW_CTX_DAG_RUN_ID='manual__2023-11-07T01:31:27.646283+00:00'
[2023-11-09T02:18:44.829+0000] {subprocess.py:63} INFO - Tmp dir root location: /tmp
[2023-11-09T02:18:44.832+0000] {subprocess.py:75} INFO - Running command: ['/bin/bash', '-c', 'python /opt/***/dags/src/scripts/export_data.py']
[2023-11-09T02:18:44.853+0000] {subprocess.py:86} INFO - Output:
[2023-11-09T02:19:21.694+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-09
[2023-11-09T02:19:37.626+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-09
[2023-11-09T02:19:55.533+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-09
[2023-11-09T02:19:57.068+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-09T02:19:58.050+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-09T02:19:59.392+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-09T02:20:00.163+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-09T02:20:00.166+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.170+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.173+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.179+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.214+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-09T02:20:00.217+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.220+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.223+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.226+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.259+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-09T02:20:00.262+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.266+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.271+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.280+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.316+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-09T02:20:00.320+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.323+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.326+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.329+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.365+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-09T02:20:00.368+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.370+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.373+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.376+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.421+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-09T02:20:00.425+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.428+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.432+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.435+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.486+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-09T02:20:00.490+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.494+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.500+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.503+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.539+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-09T02:20:00.542+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.546+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.550+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.559+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.624+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-09T02:20:00.627+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.630+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.635+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.645+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.694+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-09T02:20:00.698+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.703+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.706+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.710+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.749+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-09T02:20:00.752+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.755+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.759+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.761+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.800+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-09T02:20:00.803+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.806+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.809+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.813+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.873+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-09T02:20:00.878+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.886+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.893+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.897+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.935+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-09T02:20:00.939+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.942+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.948+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.952+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:00.972+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-09T02:20:00.974+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:00.979+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:00.982+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:00.985+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:01.016+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-09T02:20:01.018+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:01.022+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:01.025+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:01.029+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:01.060+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-09T02:20:01.063+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:01.066+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:01.068+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:01.075+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:01.525+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-09T02:20:03.170+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-09
[2023-11-09T02:20:03.173+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:20:04.091+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-09T02:20:04.093+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:20:04.983+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-09T02:20:04.985+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:20:05.801+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-09T02:20:05.803+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:20:06.492+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-09T02:20:06.495+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:20:06.501+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T02:20:06.899+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T02:20:06.901+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:06.903+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:06.905+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:06.907+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:06.933+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T02:20:06.935+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:06.937+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:06.940+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:06.943+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:06.975+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T02:20:06.977+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:06.979+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:06.983+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:06.985+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.024+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T02:20:07.028+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.032+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.035+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.038+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.087+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T02:20:07.091+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.096+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.102+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.107+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.179+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T02:20:07.182+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.185+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.188+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.192+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.228+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T02:20:07.231+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.234+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.236+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.240+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.270+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T02:20:07.272+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.274+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.277+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.279+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.304+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T02:20:07.306+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.308+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.311+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.313+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.336+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T02:20:07.338+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.340+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.343+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.345+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.377+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T02:20:07.380+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.383+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.386+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.388+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.423+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T02:20:07.425+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.429+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.432+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.435+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.461+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T02:20:07.463+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.467+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.470+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.472+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.509+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T02:20:07.513+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.517+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.520+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.522+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.553+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T02:20:07.556+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.559+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.563+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.566+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.600+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T02:20:07.602+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.604+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.609+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.612+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:07.644+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T02:20:07.647+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:07.650+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:07.653+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:07.656+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:08.020+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T02:20:08.022+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T02:20:08.276+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T02:20:08.278+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:08.567+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T02:20:08.569+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:08.836+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T02:20:08.839+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:09.087+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T02:20:09.089+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:09.365+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T02:20:09.367+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:09.634+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T02:20:09.636+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:09.899+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T02:20:09.901+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:09.903+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T02:20:10.396+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-09T02:20:10.397+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-09T02:20:10.399+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-09T02:20:10.401+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-09T02:20:10.433+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-09T02:20:10.984+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-09T02:20:11.006+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T02:20:11.316+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T02:20:11.317+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.320+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.322+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.325+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.345+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T02:20:11.347+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.349+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.351+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.353+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.373+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T02:20:11.374+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.376+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.378+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.380+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.400+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T02:20:11.403+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.405+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.407+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.410+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.430+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T02:20:11.431+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.433+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.435+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.437+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.456+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T02:20:11.458+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.460+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.463+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.465+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.483+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T02:20:11.485+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.488+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.490+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.492+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.512+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T02:20:11.514+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.516+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.517+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.519+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.536+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T02:20:11.537+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.539+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.541+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.543+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.562+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T02:20:11.563+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.565+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.566+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.568+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.589+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T02:20:11.591+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.593+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.595+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.598+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.612+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T02:20:11.614+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.615+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.617+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.619+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.642+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T02:20:11.644+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.647+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.650+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.652+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.679+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T02:20:11.681+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.683+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.685+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.687+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.705+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T02:20:11.706+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.708+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.710+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.712+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.732+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T02:20:11.733+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.736+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.737+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.739+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:11.761+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T02:20:11.763+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:11.765+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:11.767+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:11.770+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:12.069+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T02:20:12.071+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T02:20:12.350+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T02:20:12.352+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:12.685+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T02:20:12.689+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:13.080+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T02:20:13.082+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:13.491+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T02:20:13.494+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:13.771+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T02:20:13.773+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:14.021+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T02:20:14.023+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:14.319+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T02:20:14.321+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:14.324+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T02:20:14.998+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-09T02:20:15.577+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-09T02:20:16.083+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-09T02:20:16.354+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-09T02:20:16.356+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.358+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.359+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.361+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.384+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-09T02:20:16.386+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.387+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.389+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.392+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.413+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-09T02:20:16.414+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.416+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.418+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.421+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.439+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-09T02:20:16.441+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.443+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.445+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.446+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.461+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-09T02:20:16.462+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.464+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.465+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.467+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.486+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-09T02:20:16.487+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.489+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.491+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.493+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.511+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-09T02:20:16.513+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.515+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.517+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.519+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.536+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-09T02:20:16.538+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.540+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.542+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.544+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.563+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-09T02:20:16.565+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.566+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.568+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.570+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.589+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-09T02:20:16.590+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.592+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.593+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.595+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.612+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-09T02:20:16.613+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.615+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.617+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.619+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.640+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-09T02:20:16.641+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.644+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.646+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.649+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.667+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-09T02:20:16.669+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.671+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.674+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.676+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.690+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-09T02:20:16.692+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.693+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.695+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.697+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.721+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-09T02:20:16.724+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.726+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.728+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.731+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.756+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-09T02:20:16.757+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.760+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.762+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.764+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:16.786+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-09T02:20:16.788+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:20:16.790+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:16.792+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:16.794+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:17.080+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-09T02:20:17.958+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-09
[2023-11-09T02:20:17.960+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:20:18.785+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-09T02:20:18.787+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:20:19.529+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-09T02:20:19.531+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:20:20.319+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-09T02:20:20.322+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:20:21.268+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-09T02:20:21.270+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:20:21.278+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T02:20:21.646+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T02:20:21.648+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:21.651+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:21.653+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:21.656+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:21.680+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T02:20:21.682+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:21.684+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:21.687+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:21.690+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:21.719+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T02:20:21.721+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:21.724+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:21.728+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:21.730+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:21.758+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T02:20:21.761+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:21.764+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:21.766+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:21.769+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:21.793+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T02:20:21.796+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:21.799+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:21.801+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:21.804+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:21.851+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T02:20:21.855+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:21.858+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:21.863+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:21.867+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:21.906+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T02:20:21.910+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:21.914+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:21.918+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:21.921+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:21.963+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T02:20:21.965+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:21.968+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:21.973+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:21.976+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:22.005+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T02:20:22.007+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:22.011+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:22.014+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:22.018+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:22.047+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T02:20:22.050+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:22.053+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:22.056+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:22.059+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:22.087+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T02:20:22.090+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:22.092+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:22.094+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:22.097+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:22.127+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T02:20:22.130+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:22.133+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:22.135+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:22.137+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:22.166+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T02:20:22.169+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:22.171+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:22.174+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:22.176+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:22.198+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T02:20:22.200+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:22.202+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:22.205+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:22.207+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:22.232+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T02:20:22.234+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:22.236+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:22.239+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:22.241+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:22.267+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T02:20:22.270+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:22.273+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:22.275+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:22.278+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:22.306+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T02:20:22.309+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:22.311+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:22.314+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:22.317+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:22.676+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T02:20:22.678+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T02:20:23.056+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T02:20:23.058+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:23.332+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T02:20:23.334+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:23.604+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T02:20:23.606+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:23.869+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T02:20:23.870+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:24.142+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T02:20:24.143+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:24.412+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T02:20:24.413+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:24.674+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T02:20:24.676+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:24.678+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T02:20:25.213+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-09T02:20:25.215+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-09T02:20:25.217+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-09T02:20:25.219+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-09T02:20:25.257+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-09T02:20:25.691+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-09T02:20:25.714+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T02:20:25.733+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source sweden_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T02:20:26.255+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-09T02:20:26.842+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-09T02:20:27.043+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T02:20:27.045+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.046+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.047+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.049+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.065+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T02:20:27.066+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.067+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.069+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.071+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.083+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T02:20:27.085+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.087+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.089+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.090+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.105+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T02:20:27.106+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.108+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.110+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.112+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.129+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T02:20:27.130+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.132+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.133+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.135+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.154+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T02:20:27.155+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.157+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.159+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.161+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.179+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T02:20:27.182+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.183+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.185+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.187+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.201+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T02:20:27.203+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.205+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.207+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.208+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.223+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T02:20:27.224+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.226+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.228+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.230+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.247+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T02:20:27.249+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.251+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.252+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.254+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.276+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T02:20:27.278+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.280+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.282+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.284+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.308+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T02:20:27.309+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.311+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.313+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.315+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.335+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T02:20:27.338+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.340+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.342+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.344+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.362+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T02:20:27.364+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.366+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.367+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.370+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.391+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T02:20:27.393+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.395+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.396+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.398+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.414+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T02:20:27.416+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.417+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.418+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.419+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.439+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T02:20:27.440+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:20:27.442+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:20:27.443+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:20:27.446+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:20:27.662+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T02:20:27.664+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T02:20:27.963+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T02:20:27.965+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:28.260+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T02:20:28.263+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:28.520+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T02:20:28.522+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:28.748+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T02:20:28.751+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:29.007+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T02:20:29.009+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:29.273+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T02:20:29.276+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:29.550+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T02:20:29.552+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:20:29.555+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T02:20:30.521+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-09T02:20:30.556+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source oxford_policy. load_most_recent_loadable_data will return None.
[2023-11-09T02:20:54.888+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-09
[2023-11-09T02:21:06.200+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-09
[2023-11-09T02:21:16.917+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-09
[2023-11-09T02:21:17.823+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-09T02:21:18.667+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-09T02:21:19.294+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-09T02:21:19.497+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-09T02:21:19.498+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.499+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.501+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.502+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.515+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-09T02:21:19.516+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.517+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.518+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.520+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.533+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-09T02:21:19.536+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.538+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.540+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.541+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.553+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-09T02:21:19.555+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.556+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.558+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.559+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.573+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-09T02:21:19.574+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.575+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.576+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.578+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.596+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-09T02:21:19.599+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.601+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.603+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.604+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.618+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-09T02:21:19.620+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.622+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.624+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.625+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.640+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-09T02:21:19.642+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.644+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.645+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.647+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.663+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-09T02:21:19.665+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.666+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.668+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.670+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.684+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-09T02:21:19.685+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.686+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.687+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.688+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.702+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-09T02:21:19.703+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.705+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.706+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.707+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.720+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-09T02:21:19.721+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.723+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.725+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.726+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.749+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-09T02:21:19.751+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.753+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.756+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.758+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.782+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-09T02:21:19.783+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.785+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.787+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.789+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.805+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-09T02:21:19.807+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.808+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.810+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.811+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.829+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-09T02:21:19.832+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.835+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.838+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.840+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:19.862+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-09T02:21:19.864+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:19.867+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:19.869+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:19.871+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.111+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-09T02:21:20.561+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-23
[2023-11-09T02:21:20.563+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.566+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.568+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.571+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.599+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-09
[2023-11-09T02:21:20.601+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.605+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.608+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.611+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.634+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-18
[2023-11-09T02:21:20.638+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.640+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.645+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.648+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.670+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-11
[2023-11-09T02:21:20.672+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.675+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.676+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.679+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.697+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-09
[2023-11-09T02:21:20.699+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.702+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.705+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.707+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.729+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-29
[2023-11-09T02:21:20.731+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.735+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.738+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.741+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.755+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-14
[2023-11-09T02:21:20.757+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.759+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.761+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.763+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.788+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-07
[2023-11-09T02:21:20.790+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.792+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.794+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.797+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.816+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-04
[2023-11-09T02:21:20.818+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.820+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.822+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.826+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.859+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-30
[2023-11-09T02:21:20.862+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.865+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.868+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.871+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.892+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-27
[2023-11-09T02:21:20.894+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.897+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.900+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.904+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.929+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-22
[2023-11-09T02:21:20.931+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.934+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.936+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.938+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.957+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-17
[2023-11-09T02:21:20.960+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.963+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.966+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.971+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:20.987+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-09
[2023-11-09T02:21:20.989+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:20.991+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:20.995+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:20.997+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:21.012+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-02
[2023-11-09T02:21:21.014+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:21.017+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:21.018+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:21.020+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:21.043+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-31
[2023-11-09T02:21:21.045+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:21.049+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:21.054+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:21.058+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:21.091+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-25
[2023-11-09T02:21:21.095+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:21.098+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:21.103+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:21.109+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:21.483+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source ireland_hospitalizations for date 2020-08-04
[2023-11-09T02:21:22.507+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-09
[2023-11-09T02:21:22.508+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:21:23.333+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-09T02:21:23.335+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:21:24.248+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-09T02:21:24.250+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:21:25.225+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-09T02:21:25.227+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:21:25.989+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-09T02:21:25.992+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:21:25.997+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T02:21:26.289+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T02:21:26.292+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.294+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.296+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.298+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.334+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T02:21:26.336+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.338+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.340+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.342+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.380+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T02:21:26.383+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.385+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.387+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.390+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.425+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T02:21:26.427+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.430+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.433+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.437+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.491+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T02:21:26.494+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.497+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.501+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.504+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.549+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T02:21:26.552+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.554+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.558+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.560+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.604+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T02:21:26.607+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.610+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.613+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.615+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.660+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T02:21:26.663+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.666+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.669+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.675+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.708+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T02:21:26.711+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.714+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.717+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.720+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.748+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T02:21:26.753+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.755+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.759+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.762+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.784+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T02:21:26.788+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.792+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.796+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.799+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.823+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T02:21:26.826+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.829+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.834+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.839+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.860+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T02:21:26.863+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.866+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.870+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.873+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.894+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T02:21:26.898+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.901+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.903+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.906+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.928+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T02:21:26.932+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.936+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.939+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.941+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.958+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T02:21:26.960+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.963+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:26.966+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:26.971+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:26.995+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T02:21:26.997+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:26.999+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:27.002+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:27.005+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:27.417+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T02:21:27.421+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T02:21:27.780+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T02:21:27.784+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:28.134+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T02:21:28.136+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:28.463+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T02:21:28.466+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:28.790+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T02:21:28.792+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:29.205+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T02:21:29.208+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:29.749+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T02:21:29.751+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:30.059+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T02:21:30.061+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:30.063+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T02:21:30.537+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-09T02:21:30.538+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-09T02:21:30.539+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-09T02:21:30.540+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-09T02:21:30.580+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-09T02:21:30.959+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-09T02:21:30.977+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T02:21:31.252+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T02:21:31.254+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.256+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.257+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.259+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.283+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T02:21:31.284+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.286+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.288+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.290+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.314+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T02:21:31.316+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.318+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.321+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.323+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.349+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T02:21:31.351+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.354+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.356+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.358+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.389+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T02:21:31.392+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.393+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.396+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.398+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.421+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T02:21:31.423+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.426+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.428+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.430+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.456+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T02:21:31.458+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.460+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.463+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.465+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.489+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T02:21:31.491+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.493+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.495+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.498+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.520+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T02:21:31.522+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.524+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.526+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.528+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.549+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T02:21:31.551+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.554+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.556+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.558+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.586+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T02:21:31.588+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.589+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.592+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.594+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.612+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T02:21:31.614+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.616+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.618+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.619+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.640+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T02:21:31.642+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.644+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.646+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.648+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.668+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T02:21:31.670+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.672+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.674+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.675+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.693+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T02:21:31.696+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.699+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.701+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.704+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.732+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T02:21:31.734+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.736+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.738+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.739+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:31.760+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T02:21:31.761+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:31.763+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:31.765+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:31.767+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:32.010+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T02:21:32.012+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T02:21:32.326+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T02:21:32.330+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:32.640+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T02:21:32.642+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:32.926+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T02:21:32.927+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:33.228+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T02:21:33.230+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:33.511+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T02:21:33.512+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:33.886+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T02:21:33.889+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:34.328+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T02:21:34.331+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:34.334+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T02:21:35.048+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-09T02:21:35.637+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-09T02:21:36.412+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-09T02:21:36.833+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-09T02:21:36.837+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:36.840+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:36.843+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:36.845+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:36.876+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-09T02:21:36.879+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:36.881+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:36.883+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:36.886+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:36.921+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-09T02:21:36.924+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:36.927+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:36.929+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:36.932+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:36.962+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-09T02:21:36.965+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:36.969+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:36.972+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:36.974+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.003+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-09T02:21:37.005+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:37.008+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:37.010+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:37.013+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.041+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-09T02:21:37.043+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:37.045+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:37.047+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:37.049+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.075+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-09T02:21:37.078+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:37.081+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:37.083+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:37.085+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.110+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-09T02:21:37.112+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:37.115+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:37.118+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:37.120+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.149+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-09T02:21:37.151+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:37.154+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:37.157+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:37.160+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.192+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-09T02:21:37.194+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:37.197+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:37.199+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:37.201+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.225+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-09T02:21:37.228+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:37.230+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:37.232+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:37.236+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.261+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-09T02:21:37.264+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:37.268+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:37.271+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:37.274+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.320+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-09T02:21:37.322+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:37.325+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:37.327+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:37.330+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.368+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-09T02:21:37.371+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:37.373+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:37.379+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:37.382+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.422+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-09T02:21:37.427+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:37.430+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:37.433+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:37.442+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.470+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-09T02:21:37.473+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:37.476+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:37.478+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:37.480+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.504+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-09T02:21:37.506+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T02:21:37.509+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:37.511+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:37.513+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:37.860+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-09T02:21:38.504+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-23
[2023-11-09T02:21:38.506+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:38.509+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:38.511+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:38.513+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:38.537+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-09
[2023-11-09T02:21:38.539+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:38.542+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:38.544+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:38.545+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:38.562+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-18
[2023-11-09T02:21:38.564+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:38.565+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:38.566+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:38.568+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:38.586+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-11
[2023-11-09T02:21:38.587+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:38.589+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:38.591+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:38.593+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:38.616+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-09
[2023-11-09T02:21:38.618+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:38.620+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:38.622+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:38.625+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:38.650+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-29
[2023-11-09T02:21:38.652+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:38.655+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:38.658+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:38.660+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:38.681+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-14
[2023-11-09T02:21:38.683+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:38.685+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:38.687+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:38.690+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:38.713+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-07
[2023-11-09T02:21:38.716+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:38.719+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:38.722+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:38.724+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:38.753+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-04
[2023-11-09T02:21:38.756+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:38.758+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:38.761+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:38.764+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:38.796+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-30
[2023-11-09T02:21:38.799+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:38.802+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:38.805+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:38.812+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:38.864+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-27
[2023-11-09T02:21:38.868+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:38.870+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:38.873+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:38.876+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:38.905+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-22
[2023-11-09T02:21:38.908+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:38.912+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:38.917+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:38.920+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:39.042+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-17
[2023-11-09T02:21:39.054+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:39.076+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:39.106+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:39.127+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:39.215+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-09
[2023-11-09T02:21:39.226+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:39.271+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:39.297+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:39.319+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:39.418+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-02
[2023-11-09T02:21:39.433+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:39.459+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:39.472+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:39.481+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:39.568+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-31
[2023-11-09T02:21:39.574+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:39.579+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:39.584+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:39.590+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:39.703+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-25
[2023-11-09T02:21:39.711+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T02:21:39.714+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:39.718+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:39.727+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:40.245+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source ireland_hospitalizations for date 2020-08-04
[2023-11-09T02:21:41.409+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-09
[2023-11-09T02:21:41.411+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:21:42.219+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-09T02:21:42.221+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:21:43.048+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-09T02:21:43.052+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:21:43.933+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-09T02:21:43.936+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:21:44.988+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-09T02:21:44.990+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T02:21:44.999+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T02:21:45.480+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T02:21:45.483+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.486+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.488+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.491+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.515+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T02:21:45.517+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.519+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.522+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.524+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.547+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T02:21:45.549+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.551+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.554+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.555+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.580+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T02:21:45.583+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.585+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.587+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.589+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.613+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T02:21:45.616+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.621+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.623+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.628+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.658+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T02:21:45.661+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.664+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.667+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.669+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.697+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T02:21:45.699+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.702+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.704+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.706+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.730+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T02:21:45.733+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.735+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.738+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.740+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.766+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T02:21:45.769+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.771+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.773+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.775+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.800+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T02:21:45.802+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.805+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.806+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.809+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.837+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T02:21:45.839+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.842+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.844+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.846+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.875+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T02:21:45.877+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.879+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.881+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.883+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.913+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T02:21:45.915+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.918+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.921+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.925+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.959+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T02:21:45.962+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.964+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:45.966+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:45.968+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:45.994+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T02:21:45.996+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:45.998+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:46.000+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:46.003+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:46.028+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T02:21:46.031+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:46.033+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:46.036+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:46.039+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:46.065+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T02:21:46.067+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:46.070+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:46.073+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:46.076+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:46.396+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T02:21:46.398+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T02:21:46.727+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T02:21:46.729+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:47.339+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T02:21:47.342+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:47.785+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T02:21:47.788+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:48.221+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T02:21:48.222+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:48.451+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T02:21:48.453+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:48.753+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T02:21:48.798+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:49.212+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T02:21:49.214+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:49.216+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T02:21:50.010+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-09T02:21:50.013+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-09T02:21:50.015+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-09T02:21:50.017+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-09T02:21:50.053+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-09T02:21:51.068+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-09T02:21:51.122+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T02:21:51.175+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source sweden_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T02:21:53.351+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-09T02:21:55.735+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-09T02:21:56.457+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T02:21:56.461+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:56.464+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:56.468+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:56.471+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:56.506+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T02:21:56.508+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:56.511+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:56.514+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:56.517+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:56.541+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T02:21:56.543+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:56.545+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:56.548+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:56.551+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:56.579+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T02:21:56.581+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:56.584+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:56.586+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:56.589+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:56.615+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T02:21:56.618+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:56.621+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:56.623+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:56.625+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:56.653+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T02:21:56.656+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:56.659+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:56.663+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:56.665+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:56.696+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T02:21:56.698+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:56.702+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:56.706+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:56.708+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:56.741+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T02:21:56.744+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:56.747+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:56.750+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:56.754+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:56.779+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T02:21:56.783+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:56.787+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:56.796+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:56.805+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:56.863+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T02:21:56.919+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:56.923+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:56.935+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:56.948+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:57.013+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T02:21:57.018+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:57.043+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:57.047+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:57.050+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:57.087+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T02:21:57.090+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:57.093+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:57.102+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:57.116+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:57.154+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T02:21:57.157+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:57.160+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:57.165+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:57.169+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:57.196+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T02:21:57.199+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:57.202+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:57.205+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:57.209+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:57.239+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T02:21:57.242+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:57.245+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:57.248+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:57.251+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:57.287+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T02:21:57.291+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:57.294+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:57.297+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:57.300+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:57.344+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T02:21:57.346+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T02:21:57.350+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T02:21:57.355+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T02:21:57.359+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T02:21:57.929+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T02:21:57.931+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T02:21:58.226+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T02:21:58.228+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:58.451+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T02:21:58.453+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:58.800+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T02:21:58.804+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:59.244+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T02:21:59.246+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:59.558+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T02:21:59.560+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:21:59.943+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T02:21:59.945+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:22:00.242+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T02:22:00.244+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T02:22:00.245+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T02:22:00.755+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-09T02:22:00.776+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source oxford_policy. load_most_recent_loadable_data will return None.
[2023-11-09T02:22:37.425+0000] {subprocess.py:97} INFO - Command exited with return code -9
[2023-11-09T02:22:38.028+0000] {taskinstance.py:1937} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/operators/bash.py", line 210, in execute
    raise AirflowException(
airflow.exceptions.AirflowException: Bash command failed. The command returned a non-zero exit code -9.
[2023-11-09T02:22:38.121+0000] {taskinstance.py:1400} INFO - Marking task as FAILED. dag_id=export_google_data_v02, task_id=3rd_task, execution_date=20231107T013127, start_date=20231109T021844, end_date=20231109T022238
[2023-11-09T02:22:38.286+0000] {standard_task_runner.py:104} ERROR - Failed to execute job 477 for task 3rd_task (Bash command failed. The command returned a non-zero exit code -9.; 8382)
[2023-11-09T02:22:38.804+0000] {local_task_job_runner.py:228} INFO - Task exited with return code 1
[2023-11-09T02:22:38.889+0000] {taskinstance.py:2778} INFO - 0 downstream tasks scheduled from follow-on schedule check
