[2023-11-09T13:34:25.069+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=scheduled__2023-11-07T00:00:00+00:00/task_id=3rd_task permission to 509
[2023-11-09T13:34:26.666+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=scheduled__2023-11-07T00:00:00+00:00/task_id=3rd_task permission to 509
[2023-11-09T13:34:30.134+0000] {taskinstance.py:1149} INFO - Dependencies not met for <TaskInstance: export_google_data_v02.3rd_task scheduled__2023-11-07T00:00:00+00:00 [up_for_retry]>, dependency 'Not In Retry Period' FAILED: Task is not ready for retry yet but will be retried automatically. Current date is 2023-11-09T13:34:30.134261+00:00 and task will be retried at 2023-11-09T13:44:08.373915+00:00.
[2023-11-09T13:34:30.585+0000] {local_task_job_runner.py:154} INFO - Task is not able to be run
[2023-11-09T13:44:09.194+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=scheduled__2023-11-07T00:00:00+00:00/task_id=3rd_task permission to 509
[2023-11-09T13:44:09.270+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=scheduled__2023-11-07T00:00:00+00:00/task_id=3rd_task permission to 509
[2023-11-09T13:44:09.382+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: export_google_data_v02.3rd_task scheduled__2023-11-07T00:00:00+00:00 [queued]>
[2023-11-09T13:44:09.443+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: export_google_data_v02.3rd_task scheduled__2023-11-07T00:00:00+00:00 [queued]>
[2023-11-09T13:44:09.445+0000] {taskinstance.py:1361} INFO - Starting attempt 5 of 6
[2023-11-09T13:44:09.513+0000] {taskinstance.py:1382} INFO - Executing <Task(BashOperator): 3rd_task> on 2023-11-07 00:00:00+00:00
[2023-11-09T13:44:09.524+0000] {standard_task_runner.py:57} INFO - Started process 12002 to run task
[2023-11-09T13:44:09.529+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'export_google_data_v02', '3rd_task', 'scheduled__2023-11-07T00:00:00+00:00', '--job-id', '489', '--raw', '--subdir', 'DAGS_FOLDER/export_data.py', '--cfg-path', '/tmp/tmpdga1ovkn']
[2023-11-09T13:44:09.533+0000] {standard_task_runner.py:85} INFO - Job 489: Subtask 3rd_task
[2023-11-09T13:44:09.674+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=scheduled__2023-11-07T00:00:00+00:00/task_id=3rd_task permission to 509
[2023-11-09T13:44:09.688+0000] {task_command.py:416} INFO - Running <TaskInstance: export_google_data_v02.3rd_task scheduled__2023-11-07T00:00:00+00:00 [running]> on host a4fee2fb2c17
[2023-11-09T13:44:10.072+0000] {taskinstance.py:1662} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='Toema' AIRFLOW_CTX_DAG_ID='export_google_data_v02' AIRFLOW_CTX_TASK_ID='3rd_task' AIRFLOW_CTX_EXECUTION_DATE='2023-11-07T00:00:00+00:00' AIRFLOW_CTX_TRY_NUMBER='5' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2023-11-07T00:00:00+00:00'
[2023-11-09T13:44:10.076+0000] {subprocess.py:63} INFO - Tmp dir root location: /tmp
[2023-11-09T13:44:10.081+0000] {subprocess.py:75} INFO - Running command: ['/bin/bash', '-c', 'python /opt/***/dags/src/scripts/export_data.py']
[2023-11-09T13:44:10.105+0000] {subprocess.py:86} INFO - Output:
[2023-11-09T13:45:54.631+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-09
[2023-11-09T13:46:10.400+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-09
[2023-11-09T13:46:24.522+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-09
[2023-11-09T13:46:25.804+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-09T13:46:26.494+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-09T13:46:27.275+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-09T13:46:27.578+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-09T13:46:27.581+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:27.583+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:27.586+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:27.589+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:27.634+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-09T13:46:27.637+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:27.640+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:27.644+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:27.647+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:27.670+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-09T13:46:27.673+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:27.676+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:27.679+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:27.682+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:27.713+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-09T13:46:27.715+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:27.718+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:27.722+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:27.725+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:27.747+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-09T13:46:27.749+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:27.752+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:27.754+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:27.756+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:27.792+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-09T13:46:27.794+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:27.797+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:27.800+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:27.802+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:27.827+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-09T13:46:27.830+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:27.832+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:27.834+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:27.837+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:27.882+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-09T13:46:27.885+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:27.888+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:27.892+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:27.895+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:27.930+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-09T13:46:27.933+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:27.937+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:27.942+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:27.945+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:27.971+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-09T13:46:27.974+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:27.977+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:27.979+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:27.982+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:28.017+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-09T13:46:28.019+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:28.022+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:28.025+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:28.028+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:28.055+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-09T13:46:28.058+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:28.060+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:28.062+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:28.065+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:28.087+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-09T13:46:28.090+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:28.092+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:28.094+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:28.097+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:28.135+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-09T13:46:28.138+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:28.141+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:28.144+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:28.146+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:28.171+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-09T13:46:28.173+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:28.175+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:28.178+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:28.180+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:28.214+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-09T13:46:28.217+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:28.219+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:28.221+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:28.224+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:28.264+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-09T13:46:28.266+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:28.269+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:28.271+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:28.276+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:28.649+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-09T13:46:29.720+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-09
[2023-11-09T13:46:29.722+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:46:30.582+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-09T13:46:30.584+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:46:31.667+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-09T13:46:31.670+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:46:32.809+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-09T13:46:32.812+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:46:33.883+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-09T13:46:33.885+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:46:33.893+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T13:46:34.126+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T13:46:34.128+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.130+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.133+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.136+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.159+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T13:46:34.162+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.164+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.166+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.169+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.194+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T13:46:34.197+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.200+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.205+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.207+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.237+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T13:46:34.240+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.243+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.248+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.255+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.308+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T13:46:34.314+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.320+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.327+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.334+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.362+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T13:46:34.368+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.371+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.377+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.382+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.410+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T13:46:34.413+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.415+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.417+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.420+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.445+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T13:46:34.447+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.449+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.452+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.454+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.473+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T13:46:34.475+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.476+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.478+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.480+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.517+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T13:46:34.520+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.521+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.523+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.525+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.551+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T13:46:34.553+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.555+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.557+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.560+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.584+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T13:46:34.586+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.588+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.589+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.591+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.610+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T13:46:34.612+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.613+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.615+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.618+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.633+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T13:46:34.634+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.636+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.637+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.639+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.661+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T13:46:34.663+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.665+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.666+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.668+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.686+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T13:46:34.688+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.690+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.691+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.693+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.717+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T13:46:34.719+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:34.721+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:34.722+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:34.723+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:34.959+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T13:46:34.961+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T13:46:35.231+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T13:46:35.234+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:35.486+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T13:46:35.489+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:35.782+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T13:46:35.785+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:36.109+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T13:46:36.113+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:36.598+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T13:46:36.602+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:37.022+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T13:46:37.025+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:37.431+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T13:46:37.433+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:37.436+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T13:46:38.162+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-09T13:46:38.164+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-09T13:46:38.168+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-09T13:46:38.171+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-09T13:46:38.222+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-09T13:46:38.857+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-09T13:46:38.877+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T13:46:39.097+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T13:46:39.099+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.101+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.104+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.107+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.134+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T13:46:39.136+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.139+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.141+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.144+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.176+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T13:46:39.178+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.180+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.183+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.186+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.222+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T13:46:39.224+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.226+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.228+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.232+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.251+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T13:46:39.253+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.255+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.257+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.259+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.285+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T13:46:39.287+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.290+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.292+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.295+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.335+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T13:46:39.338+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.342+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.346+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.351+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.375+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T13:46:39.377+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.379+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.381+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.384+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.427+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T13:46:39.430+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.433+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.436+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.440+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.462+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T13:46:39.464+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.467+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.469+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.471+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.493+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T13:46:39.495+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.497+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.500+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.503+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.525+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T13:46:39.527+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.530+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.534+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.536+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.556+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T13:46:39.558+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.560+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.562+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.564+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.593+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T13:46:39.595+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.597+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.600+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.602+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.623+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T13:46:39.625+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.627+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.629+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.632+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.662+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T13:46:39.665+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.667+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.669+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.671+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.697+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T13:46:39.699+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:39.701+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:39.704+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:39.707+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:39.990+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T13:46:39.992+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T13:46:40.253+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T13:46:40.255+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:40.561+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T13:46:40.564+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:40.895+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T13:46:40.898+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:41.265+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T13:46:41.267+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:41.638+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T13:46:41.641+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:42.068+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T13:46:42.071+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:42.544+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T13:46:42.549+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:42.552+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T13:46:43.329+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-09T13:46:44.057+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-09T13:46:45.031+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-09T13:46:45.406+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-09T13:46:45.409+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.411+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.414+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.416+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:45.440+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-09T13:46:45.443+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.447+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.449+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.451+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:45.481+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-09T13:46:45.484+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.486+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.489+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.492+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:45.519+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-09T13:46:45.521+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.524+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.527+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.530+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:45.560+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-09T13:46:45.563+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.566+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.568+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.574+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:45.600+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-09T13:46:45.603+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.606+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.610+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.613+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:45.652+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-09T13:46:45.654+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.658+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.662+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.667+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:45.698+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-09T13:46:45.700+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.702+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.705+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.708+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:45.752+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-09T13:46:45.755+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.757+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.762+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.764+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:45.794+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-09T13:46:45.797+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.799+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.802+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.805+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:45.845+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-09T13:46:45.848+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.851+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.854+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.857+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:45.889+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-09T13:46:45.892+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.894+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.896+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.899+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:45.928+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-09T13:46:45.930+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.933+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.935+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.936+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:45.978+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-09T13:46:45.980+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:45.983+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:45.986+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:45.989+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:46.025+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-09T13:46:46.028+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:46.031+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:46.034+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:46.036+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:46.068+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-09T13:46:46.070+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:46.074+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:46.079+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:46.083+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:46.136+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-09T13:46:46.139+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:46:46.142+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:46.154+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:46.157+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:46.523+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-09T13:46:47.689+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-09
[2023-11-09T13:46:47.692+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:46:48.506+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-09T13:46:48.508+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:46:49.436+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-09T13:46:49.439+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:46:50.779+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-09T13:46:50.782+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:46:51.978+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-09T13:46:51.980+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:46:51.989+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T13:46:52.245+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T13:46:52.250+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.255+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.259+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.264+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.313+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T13:46:52.318+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.321+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.324+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.326+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.354+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T13:46:52.356+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.357+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.359+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.361+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.390+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T13:46:52.392+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.395+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.398+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.400+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.419+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T13:46:52.422+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.425+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.428+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.431+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.454+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T13:46:52.457+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.458+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.460+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.462+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.483+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T13:46:52.485+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.487+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.489+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.491+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.516+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T13:46:52.518+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.521+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.523+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.526+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.546+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T13:46:52.547+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.549+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.551+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.553+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.581+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T13:46:52.584+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.587+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.589+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.591+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.612+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T13:46:52.615+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.618+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.620+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.623+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.645+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T13:46:52.648+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.650+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.652+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.655+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.680+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T13:46:52.682+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.684+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.687+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.689+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.715+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T13:46:52.717+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.720+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.723+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.725+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.751+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T13:46:52.754+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.757+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.759+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.762+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.785+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T13:46:52.787+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.789+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.791+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.794+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:52.817+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T13:46:52.820+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:52.822+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:52.824+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:52.826+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:53.170+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T13:46:53.173+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T13:46:53.537+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T13:46:53.539+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:53.964+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T13:46:53.967+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:54.453+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T13:46:54.457+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:54.920+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T13:46:54.923+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:55.334+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T13:46:55.337+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:55.828+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T13:46:55.830+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:56.157+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T13:46:56.160+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:46:56.162+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T13:46:56.821+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-09T13:46:56.824+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-09T13:46:56.826+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-09T13:46:56.829+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-09T13:46:56.865+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-09T13:46:57.689+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-09T13:46:57.729+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T13:46:57.759+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source sweden_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T13:46:58.686+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-09T13:46:59.551+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-09T13:46:59.938+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T13:46:59.941+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:59.944+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:59.947+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:59.950+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:46:59.975+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T13:46:59.977+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:46:59.980+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:46:59.983+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:46:59.985+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.013+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T13:47:00.015+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.017+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.019+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.023+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.063+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T13:47:00.067+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.070+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.086+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.089+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.134+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T13:47:00.136+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.139+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.143+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.146+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.181+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T13:47:00.184+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.187+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.190+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.193+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.227+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T13:47:00.229+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.231+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.234+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.237+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.305+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T13:47:00.310+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.317+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.321+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.325+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.365+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T13:47:00.368+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.370+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.373+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.375+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.412+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T13:47:00.415+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.417+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.420+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.423+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.455+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T13:47:00.457+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.459+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.461+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.464+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.491+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T13:47:00.493+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.495+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.498+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.500+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.524+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T13:47:00.527+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.529+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.532+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.535+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.563+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T13:47:00.566+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.568+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.571+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.573+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.601+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T13:47:00.604+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.606+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.608+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.610+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.632+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T13:47:00.634+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.636+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.638+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.641+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.662+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T13:47:00.665+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:47:00.667+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:47:00.669+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:47:00.671+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:47:00.918+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T13:47:00.920+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T13:47:01.194+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T13:47:01.196+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:47:01.435+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T13:47:01.436+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:47:01.623+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T13:47:01.625+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:47:01.849+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T13:47:01.851+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:47:02.142+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T13:47:02.143+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:47:02.360+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T13:47:02.361+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:47:02.570+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T13:47:02.571+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:47:02.573+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T13:47:03.153+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-09T13:47:03.193+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source oxford_policy. load_most_recent_loadable_data will return None.
[2023-11-09T13:47:42.718+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-09
[2023-11-09T13:47:57.401+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-09
[2023-11-09T13:48:13.334+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-09
[2023-11-09T13:48:14.602+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-09T13:48:15.484+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-09T13:48:16.564+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-09T13:48:16.927+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-09T13:48:16.931+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:16.933+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:16.935+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:16.938+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:16.963+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-09T13:48:16.966+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:16.968+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:16.973+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:16.975+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.023+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-09T13:48:17.027+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.030+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.034+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.039+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.073+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-09T13:48:17.077+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.080+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.084+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.087+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.126+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-09T13:48:17.130+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.132+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.134+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.136+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.169+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-09T13:48:17.172+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.174+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.177+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.182+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.219+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-09T13:48:17.222+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.224+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.227+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.229+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.268+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-09T13:48:17.270+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.272+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.275+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.280+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.308+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-09T13:48:17.310+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.312+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.315+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.318+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.344+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-09T13:48:17.347+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.349+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.352+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.355+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.379+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-09T13:48:17.382+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.385+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.388+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.391+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.420+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-09T13:48:17.422+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.424+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.427+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.429+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.464+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-09T13:48:17.467+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.470+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.473+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.475+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.513+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-09T13:48:17.516+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.524+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.537+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.544+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.579+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-09T13:48:17.582+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.584+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.588+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.591+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.636+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-09T13:48:17.639+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.643+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.646+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.649+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:17.698+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-09T13:48:17.702+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:17.706+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:17.709+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:17.713+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:18.258+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-09T13:48:19.274+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-23
[2023-11-09T13:48:19.278+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:19.281+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:19.283+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:19.286+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:19.334+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-09
[2023-11-09T13:48:19.339+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:19.344+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:19.347+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:19.350+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:19.394+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-18
[2023-11-09T13:48:19.398+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:19.404+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:19.416+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:19.424+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:19.471+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-11
[2023-11-09T13:48:19.475+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:19.477+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:19.482+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:19.484+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:19.522+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-09
[2023-11-09T13:48:19.525+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:19.529+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:19.533+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:19.537+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:19.573+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-29
[2023-11-09T13:48:19.577+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:19.579+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:19.582+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:19.585+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:19.612+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-14
[2023-11-09T13:48:19.618+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:19.623+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:19.626+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:19.629+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:19.665+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-07
[2023-11-09T13:48:19.668+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:19.672+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:19.675+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:19.678+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:19.727+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-04
[2023-11-09T13:48:19.731+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:19.735+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:19.739+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:19.742+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:19.796+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-30
[2023-11-09T13:48:19.798+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:19.801+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:19.803+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:19.806+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:19.842+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-27
[2023-11-09T13:48:19.845+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:19.848+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:19.855+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:19.858+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:19.904+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-22
[2023-11-09T13:48:19.906+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:19.909+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:19.914+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:19.921+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:19.961+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-17
[2023-11-09T13:48:19.963+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:19.966+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:19.969+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:19.971+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:20.018+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-09
[2023-11-09T13:48:20.020+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:20.023+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:20.026+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:20.028+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:20.073+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-02
[2023-11-09T13:48:20.077+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:20.090+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:20.094+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:20.101+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:20.154+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-31
[2023-11-09T13:48:20.156+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:20.159+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:20.161+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:20.164+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:20.201+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-25
[2023-11-09T13:48:20.203+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:20.206+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:20.209+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:20.211+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:20.556+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source ireland_hospitalizations for date 2020-08-04
[2023-11-09T13:48:21.754+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-09
[2023-11-09T13:48:21.757+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:48:23.000+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-09T13:48:23.003+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:48:24.174+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-09T13:48:24.176+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:48:25.044+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-09T13:48:25.047+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:48:26.093+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-09T13:48:26.095+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:48:26.103+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T13:48:26.466+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T13:48:26.470+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:26.473+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:26.475+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:26.478+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:26.511+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T13:48:26.516+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:26.519+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:26.522+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:26.524+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:26.580+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T13:48:26.584+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:26.587+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:26.591+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:26.594+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:26.631+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T13:48:26.633+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:26.637+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:26.645+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:26.652+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:26.691+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T13:48:26.693+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:26.698+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:26.700+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:26.704+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:26.744+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T13:48:26.748+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:26.754+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:26.760+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:26.766+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:26.799+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T13:48:26.802+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:26.804+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:26.807+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:26.810+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:26.863+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T13:48:26.867+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:26.871+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:26.875+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:26.878+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:26.910+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T13:48:26.915+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:26.918+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:26.922+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:26.927+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:26.977+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T13:48:26.980+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:26.982+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:26.986+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:26.991+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:27.034+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T13:48:27.037+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:27.040+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:27.044+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:27.047+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:27.084+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T13:48:27.087+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:27.090+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:27.092+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:27.095+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:27.135+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T13:48:27.138+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:27.141+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:27.144+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:27.147+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:27.182+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T13:48:27.184+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:27.186+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:27.188+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:27.192+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:27.228+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T13:48:27.231+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:27.233+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:27.236+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:27.244+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:27.284+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T13:48:27.289+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:27.294+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:27.298+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:27.301+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:27.347+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T13:48:27.350+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:27.354+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:27.357+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:27.359+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:27.777+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T13:48:27.780+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T13:48:28.166+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T13:48:28.169+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:28.677+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T13:48:28.680+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:29.084+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T13:48:29.087+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:29.445+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T13:48:29.448+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:29.748+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T13:48:29.750+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:30.074+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T13:48:30.076+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:30.545+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T13:48:30.547+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:30.549+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T13:48:31.124+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-09T13:48:31.126+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-09T13:48:31.129+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-09T13:48:31.132+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-09T13:48:31.169+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-09T13:48:32.091+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-09T13:48:32.140+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T13:48:32.470+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T13:48:32.472+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.474+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.477+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.479+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.518+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T13:48:32.521+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.523+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.526+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.529+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.556+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T13:48:32.561+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.565+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.567+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.571+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.594+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T13:48:32.597+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.599+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.602+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.605+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.631+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T13:48:32.634+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.636+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.640+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.643+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.677+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T13:48:32.680+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.683+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.686+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.689+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.715+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T13:48:32.717+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.719+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.721+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.723+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.743+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T13:48:32.745+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.748+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.751+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.754+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.774+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T13:48:32.777+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.779+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.781+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.783+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.807+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T13:48:32.809+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.812+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.814+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.816+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.839+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T13:48:32.841+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.842+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.844+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.846+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.879+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T13:48:32.881+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.883+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.885+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.888+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.914+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T13:48:32.916+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.919+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.922+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.924+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.945+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T13:48:32.948+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.950+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.952+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.954+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:32.977+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T13:48:32.979+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:32.982+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:32.984+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:32.986+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:33.007+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T13:48:33.009+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:33.011+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:33.013+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:33.016+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:33.048+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T13:48:33.050+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:33.052+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:33.055+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:33.057+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:33.373+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T13:48:33.376+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T13:48:33.732+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T13:48:33.734+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:34.091+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T13:48:34.093+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:34.331+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T13:48:34.332+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:34.562+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T13:48:34.563+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:34.786+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T13:48:34.788+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:35.004+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T13:48:35.005+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:35.244+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T13:48:35.246+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:35.248+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T13:48:35.837+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-09T13:48:36.549+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-09T13:48:37.308+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-09T13:48:37.677+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-09T13:48:37.680+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:37.682+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:37.685+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:37.688+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:37.714+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-09T13:48:37.716+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:37.719+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:37.722+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:37.724+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:37.748+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-09T13:48:37.751+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:37.754+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:37.757+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:37.760+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:37.785+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-09T13:48:37.788+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:37.791+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:37.793+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:37.796+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:37.827+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-09T13:48:37.830+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:37.833+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:37.836+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:37.840+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:37.873+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-09T13:48:37.876+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:37.879+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:37.883+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:37.887+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:37.914+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-09T13:48:37.917+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:37.919+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:37.922+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:37.924+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:37.948+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-09T13:48:37.951+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:37.953+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:37.956+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:37.958+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:37.983+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-09T13:48:37.986+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:37.988+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:37.991+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:37.993+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:38.016+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-09T13:48:38.019+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:38.021+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:38.023+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:38.025+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:38.039+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-09T13:48:38.041+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:38.043+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:38.045+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:38.047+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:38.062+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-09T13:48:38.064+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:38.066+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:38.068+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:38.070+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:38.084+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-09T13:48:38.087+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:38.089+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:38.091+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:38.093+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:38.111+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-09T13:48:38.113+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:38.116+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:38.118+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:38.120+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:38.135+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-09T13:48:38.136+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:38.138+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:38.140+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:38.142+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:38.164+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-09T13:48:38.166+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:38.168+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:38.171+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:38.173+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:38.192+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-09T13:48:38.193+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-09T13:48:38.195+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:38.197+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:38.199+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:38.468+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-09T13:48:38.849+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-23
[2023-11-09T13:48:38.851+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:38.853+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:38.855+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:38.858+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:38.891+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-09
[2023-11-09T13:48:38.893+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:38.894+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:38.896+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:38.899+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:38.927+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-18
[2023-11-09T13:48:38.929+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:38.931+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:38.934+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:38.936+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:38.957+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-11
[2023-11-09T13:48:38.959+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:38.961+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:38.963+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:38.965+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:38.991+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-09
[2023-11-09T13:48:38.993+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:38.995+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:38.998+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:39.000+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:39.024+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-29
[2023-11-09T13:48:39.026+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:39.029+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:39.032+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:39.034+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:39.060+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-14
[2023-11-09T13:48:39.062+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:39.064+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:39.066+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:39.068+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:39.097+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-07
[2023-11-09T13:48:39.099+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:39.101+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:39.104+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:39.106+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:39.133+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-04
[2023-11-09T13:48:39.135+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:39.137+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:39.139+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:39.141+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:39.161+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-30
[2023-11-09T13:48:39.163+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:39.164+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:39.166+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:39.168+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:39.192+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-27
[2023-11-09T13:48:39.194+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:39.196+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:39.198+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:39.200+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:39.221+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-22
[2023-11-09T13:48:39.223+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:39.224+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:39.226+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:39.228+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:39.255+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-17
[2023-11-09T13:48:39.257+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:39.258+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:39.259+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:39.261+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:39.289+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-09
[2023-11-09T13:48:39.291+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:39.294+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:39.296+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:39.299+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:39.322+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-02
[2023-11-09T13:48:39.324+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:39.326+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:39.327+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:39.329+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:39.353+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-31
[2023-11-09T13:48:39.355+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:39.357+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:39.360+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:39.362+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:39.392+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-25
[2023-11-09T13:48:39.394+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-09T13:48:39.396+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:39.398+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:39.400+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:39.725+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source ireland_hospitalizations for date 2020-08-04
[2023-11-09T13:48:40.720+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-09
[2023-11-09T13:48:40.723+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:48:41.665+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-09T13:48:41.669+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:48:42.891+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-09T13:48:42.897+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:48:44.665+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-09T13:48:44.671+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:48:46.236+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-09T13:48:46.240+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-09T13:48:46.254+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T13:48:46.898+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T13:48:46.903+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:46.906+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:46.913+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:46.917+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:46.942+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T13:48:46.945+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:46.949+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:46.951+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:46.955+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:46.982+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T13:48:46.985+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:46.987+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:46.990+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:46.993+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.018+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T13:48:47.021+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.024+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.026+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.030+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.061+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T13:48:47.064+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.067+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.070+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.074+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.107+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T13:48:47.111+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.115+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.119+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.123+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.144+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T13:48:47.147+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.149+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.152+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.155+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.179+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T13:48:47.181+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.183+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.187+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.189+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.213+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T13:48:47.215+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.217+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.219+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.221+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.261+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T13:48:47.266+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.270+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.272+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.275+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.309+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T13:48:47.312+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.315+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.317+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.320+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.354+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T13:48:47.357+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.360+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.363+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.366+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.406+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T13:48:47.408+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.411+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.414+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.417+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.452+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T13:48:47.454+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.457+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.459+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.462+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.497+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T13:48:47.499+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.502+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.503+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.505+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.528+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T13:48:47.531+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.534+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.536+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.538+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.562+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T13:48:47.565+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:47.567+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:47.569+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:47.572+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:47.965+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T13:48:47.967+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T13:48:48.276+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T13:48:48.277+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:48.590+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T13:48:48.592+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:49.127+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T13:48:49.137+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:49.633+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T13:48:49.636+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:50.146+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T13:48:50.147+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:50.550+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T13:48:50.551+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:51.193+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T13:48:51.195+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:51.198+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T13:48:51.935+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-09T13:48:51.937+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-09T13:48:51.939+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-09T13:48:51.941+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-09T13:48:51.973+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-09T13:48:52.741+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-09T13:48:52.785+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-09T13:48:52.828+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source sweden_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T13:48:53.783+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-09T13:48:54.823+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-09T13:48:55.479+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-09T13:48:55.486+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:55.490+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:55.494+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:55.499+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:55.535+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-09T13:48:55.538+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:55.543+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:55.548+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:55.555+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:55.598+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-09T13:48:55.602+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:55.608+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:55.611+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:55.615+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:55.657+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-09T13:48:55.660+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:55.663+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:55.666+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:55.669+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:55.714+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-09T13:48:55.717+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:55.720+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:55.726+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:55.730+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:55.795+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-09T13:48:55.798+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:55.806+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:55.824+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:55.842+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:55.894+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-09T13:48:55.897+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:55.911+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:55.944+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:55.957+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:56.020+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-09T13:48:56.029+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:56.034+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:56.054+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:56.059+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:56.129+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-09T13:48:56.133+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:56.137+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:56.140+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:56.146+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:56.226+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-09T13:48:56.232+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:56.238+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:56.246+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:56.251+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:56.349+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-09T13:48:56.355+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:56.376+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:56.379+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:56.383+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:56.451+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-09T13:48:56.454+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:56.458+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:56.464+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:56.467+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:56.529+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-09T13:48:56.536+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:56.543+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:56.546+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:56.549+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:56.593+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-09T13:48:56.595+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:56.598+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:56.601+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:56.615+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:56.716+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-09T13:48:56.721+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:56.725+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:56.730+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:56.736+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:56.775+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-09T13:48:56.781+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:56.784+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:56.787+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:56.790+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:56.918+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-09T13:48:56.930+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-09T13:48:56.936+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-09T13:48:56.943+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-09T13:48:56.948+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-09T13:48:57.412+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-09T13:48:57.415+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-09T13:48:57.727+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-09T13:48:57.729+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:58.022+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-09T13:48:58.025+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:58.375+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-09T13:48:58.377+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:58.694+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-09T13:48:58.697+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:59.024+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-09T13:48:59.028+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:59.386+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-09T13:48:59.389+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:59.793+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-09T13:48:59.796+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-09T13:48:59.799+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-09T13:49:00.585+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-09T13:49:00.648+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source oxford_policy. load_most_recent_loadable_data will return None.
[2023-11-09T13:50:07.227+0000] {subprocess.py:97} INFO - Command exited with return code -9
[2023-11-09T13:50:07.418+0000] {taskinstance.py:1937} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/operators/bash.py", line 210, in execute
    raise AirflowException(
airflow.exceptions.AirflowException: Bash command failed. The command returned a non-zero exit code -9.
[2023-11-09T13:50:07.442+0000] {taskinstance.py:1400} INFO - Marking task as UP_FOR_RETRY. dag_id=export_google_data_v02, task_id=3rd_task, execution_date=20231107T000000, start_date=20231109T134409, end_date=20231109T135007
[2023-11-09T13:50:07.524+0000] {standard_task_runner.py:104} ERROR - Failed to execute job 489 for task 3rd_task (Bash command failed. The command returned a non-zero exit code -9.; 12002)
[2023-11-09T13:50:07.593+0000] {local_task_job_runner.py:228} INFO - Task exited with return code 1
[2023-11-09T13:50:07.655+0000] {taskinstance.py:2778} INFO - 0 downstream tasks scheduled from follow-on schedule check
