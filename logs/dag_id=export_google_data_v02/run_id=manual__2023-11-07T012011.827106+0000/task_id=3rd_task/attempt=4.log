[2023-11-07T02:01:39.374+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=manual__2023-11-07T01:20:11.827106+00:00/task_id=3rd_task permission to 509
[2023-11-07T02:01:39.477+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=manual__2023-11-07T01:20:11.827106+00:00/task_id=3rd_task permission to 509
[2023-11-07T02:01:39.634+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: export_google_data_v02.3rd_task manual__2023-11-07T01:20:11.827106+00:00 [queued]>
[2023-11-07T02:01:39.673+0000] {taskinstance.py:1159} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: export_google_data_v02.3rd_task manual__2023-11-07T01:20:11.827106+00:00 [queued]>
[2023-11-07T02:01:39.675+0000] {taskinstance.py:1361} INFO - Starting attempt 4 of 6
[2023-11-07T02:01:39.728+0000] {taskinstance.py:1382} INFO - Executing <Task(BashOperator): 3rd_task> on 2023-11-07 01:20:11.827106+00:00
[2023-11-07T02:01:39.744+0000] {standard_task_runner.py:57} INFO - Started process 13418 to run task
[2023-11-07T02:01:39.754+0000] {standard_task_runner.py:84} INFO - Running: ['***', 'tasks', 'run', 'export_google_data_v02', '3rd_task', 'manual__2023-11-07T01:20:11.827106+00:00', '--job-id', '306', '--raw', '--subdir', 'DAGS_FOLDER/export_data.py', '--cfg-path', '/tmp/tmpw8sqwhdl']
[2023-11-07T02:01:39.762+0000] {standard_task_runner.py:85} INFO - Job 306: Subtask 3rd_task
[2023-11-07T02:01:39.961+0000] {logging_mixin.py:151} INFO - Changing /opt/***/logs/dag_id=export_google_data_v02/run_id=manual__2023-11-07T01:20:11.827106+00:00/task_id=3rd_task permission to 509
[2023-11-07T02:01:39.977+0000] {task_command.py:416} INFO - Running <TaskInstance: export_google_data_v02.3rd_task manual__2023-11-07T01:20:11.827106+00:00 [running]> on host c4630ce72677
[2023-11-07T02:01:40.303+0000] {taskinstance.py:1662} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='Toema' AIRFLOW_CTX_DAG_ID='export_google_data_v02' AIRFLOW_CTX_TASK_ID='3rd_task' AIRFLOW_CTX_EXECUTION_DATE='2023-11-07T01:20:11.827106+00:00' AIRFLOW_CTX_TRY_NUMBER='4' AIRFLOW_CTX_DAG_RUN_ID='manual__2023-11-07T01:20:11.827106+00:00'
[2023-11-07T02:01:40.308+0000] {subprocess.py:63} INFO - Tmp dir root location: /tmp
[2023-11-07T02:01:40.321+0000] {subprocess.py:75} INFO - Running command: ['/bin/bash', '-c', 'python /opt/***/dags/src/scripts/export_data.py']
[2023-11-07T02:01:40.370+0000] {subprocess.py:86} INFO - Output:
[2023-11-07T02:02:25.397+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:02:40.552+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:02:55.800+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:02:57.422+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:02:58.262+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-07T02:02:59.201+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:02:59.757+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-07T02:02:59.759+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:59.765+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:59.769+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:59.774+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:59.812+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-07T02:02:59.817+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:59.821+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:59.825+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:59.830+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:59.863+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-07T02:02:59.866+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:59.869+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:59.872+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:59.878+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:59.903+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-07T02:02:59.906+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:59.909+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:59.912+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:59.916+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:02:59.947+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-07T02:02:59.951+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:02:59.958+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:02:59.962+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:02:59.966+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:00.000+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-07T02:03:00.006+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:00.009+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:00.020+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:00.024+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:00.085+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-07T02:03:00.096+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:00.101+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:00.112+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:00.115+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:00.159+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-07T02:03:00.162+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:00.172+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:00.176+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:00.182+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:00.229+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-07T02:03:00.234+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:00.237+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:00.241+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:00.245+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:00.291+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-07T02:03:00.295+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:00.299+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:00.303+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:00.309+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:00.339+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-07T02:03:00.342+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:00.344+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:00.348+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:00.351+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:00.385+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-07T02:03:00.388+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:00.394+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:00.398+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:00.401+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:00.438+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-07T02:03:00.442+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:00.445+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:00.448+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:00.456+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:00.506+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-07T02:03:00.510+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:00.515+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:00.520+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:00.528+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:00.592+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-07T02:03:00.596+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:00.615+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:00.618+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:00.639+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:00.736+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-07T02:03:00.739+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:00.743+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:00.749+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:00.764+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:00.818+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-07T02:03:00.821+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:00.824+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:00.833+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:00.839+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:01.462+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-07T02:03:03.380+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-07T02:03:03.384+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:03:04.588+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-07T02:03:04.591+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:03:05.781+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-07T02:03:05.784+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:03:06.955+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-07T02:03:06.957+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:03:06.969+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:03:07.421+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:03:07.425+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.428+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.431+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.434+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:07.461+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:03:07.463+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.467+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.470+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.473+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:07.509+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:03:07.513+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.517+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.520+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.524+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:07.553+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:03:07.556+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.559+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.562+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.566+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:07.592+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:03:07.595+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.598+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.600+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.602+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:07.632+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:03:07.634+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.637+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.639+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.642+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:07.669+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:03:07.672+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.675+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.677+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.680+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:07.706+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:03:07.709+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.712+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.714+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.717+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:07.746+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:03:07.749+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.752+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.755+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.758+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:07.783+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:03:07.786+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.789+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.791+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.794+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:07.822+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:03:07.825+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.827+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.829+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.831+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:07.874+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:03:07.876+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.879+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.882+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.884+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:07.910+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:03:07.913+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.915+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.918+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.921+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:07.961+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:03:07.963+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:07.966+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:07.968+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:07.970+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:08.007+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:03:08.009+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:08.012+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:08.014+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:08.017+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:08.055+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:03:08.058+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:08.060+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:08.063+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:08.066+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:08.094+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:03:08.097+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:08.100+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:08.104+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:08.107+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:08.469+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:03:08.471+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:03:08.775+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:03:08.777+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:09.084+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:03:09.087+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:09.454+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:03:09.456+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:09.858+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:03:09.861+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:10.258+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:03:10.261+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:10.689+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:03:10.692+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:11.233+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:03:11.236+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:11.239+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:03:12.083+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-07T02:03:12.087+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-07T02:03:12.091+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-07T02:03:12.095+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-07T02:03:12.155+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-07T02:03:13.070+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:03:13.121+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:03:13.571+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:03:13.573+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:13.576+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:13.578+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:13.581+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:13.609+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:03:13.611+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:13.614+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:13.616+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:13.618+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:13.640+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:03:13.642+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:13.644+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:13.646+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:13.649+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:13.672+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:03:13.674+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:13.677+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:13.680+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:13.682+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:13.711+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:03:13.713+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:13.717+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:13.719+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:13.721+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:13.755+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:03:13.758+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:13.760+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:13.763+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:13.766+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:13.808+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:03:13.814+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:13.816+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:13.819+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:13.822+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:13.845+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:03:13.848+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:13.851+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:13.855+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:13.858+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:13.882+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:03:13.885+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:13.888+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:13.892+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:13.895+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:13.923+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:03:13.925+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:13.928+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:13.932+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:13.935+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:13.959+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:03:13.962+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:13.965+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:13.966+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:13.968+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:13.990+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:03:13.993+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:13.997+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:14.000+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:14.004+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:14.026+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:03:14.028+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:14.031+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:14.034+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:14.037+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:14.060+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:03:14.063+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:14.066+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:14.070+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:14.073+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:14.095+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:03:14.097+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:14.101+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:14.105+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:14.108+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:14.128+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:03:14.130+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:14.133+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:14.136+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:14.138+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:14.176+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:03:14.179+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:14.182+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:14.185+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:14.188+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:14.527+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:03:14.529+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:03:14.808+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:03:14.810+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:15.143+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:03:15.145+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:15.488+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:03:15.490+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:15.825+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:03:15.828+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:16.161+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:03:16.163+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:16.584+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:03:16.586+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:16.953+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:03:16.956+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:16.960+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:03:17.802+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:03:18.556+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-07T02:03:19.366+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:03:19.665+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-07T02:03:19.668+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:19.672+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:19.674+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:19.678+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:19.696+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-07T02:03:19.698+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:19.701+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:19.703+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:19.706+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:19.736+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-07T02:03:19.739+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:19.743+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:19.746+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:19.749+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:19.774+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-07T02:03:19.777+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:19.780+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:19.782+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:19.785+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:19.812+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-07T02:03:19.816+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:19.818+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:19.821+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:19.824+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:19.864+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-07T02:03:19.867+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:19.870+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:19.873+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:19.876+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:19.918+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-07T02:03:19.921+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:19.924+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:19.927+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:19.930+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:19.967+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-07T02:03:19.970+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:19.974+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:19.977+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:19.981+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:20.014+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-07T02:03:20.017+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:20.020+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:20.022+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:20.025+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:20.061+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-07T02:03:20.064+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:20.067+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:20.070+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:20.073+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:20.117+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-07T02:03:20.120+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:20.122+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:20.125+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:20.128+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:20.161+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-07T02:03:20.163+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:20.166+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:20.170+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:20.173+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:20.198+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-07T02:03:20.201+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:20.203+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:20.206+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:20.209+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:20.239+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-07T02:03:20.241+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:20.244+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:20.246+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:20.249+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:20.275+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-07T02:03:20.278+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:20.280+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:20.283+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:20.285+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:20.311+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-07T02:03:20.314+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:20.316+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:20.319+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:20.322+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:20.347+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-07T02:03:20.349+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:03:20.351+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:20.354+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:20.357+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:20.684+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-07T02:03:23.042+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-07T02:03:23.044+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:03:25.152+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-07T02:03:25.154+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:03:27.150+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-07T02:03:27.153+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:03:31.200+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-07T02:03:31.204+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:03:31.224+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:03:31.694+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:03:31.696+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:31.700+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:31.704+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:31.707+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:31.759+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:03:31.764+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:31.767+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:31.771+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:31.780+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:31.823+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:03:31.827+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:31.830+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:31.832+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:31.835+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:31.895+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:03:31.900+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:31.906+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:31.911+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:31.915+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:31.974+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:03:31.977+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:31.980+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:31.983+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:31.986+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:32.026+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:03:32.030+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:32.033+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:32.037+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:32.044+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:32.079+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:03:32.082+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:32.085+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:32.088+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:32.093+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:32.134+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:03:32.138+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:32.141+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:32.145+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:32.149+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:32.189+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:03:32.192+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:32.194+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:32.197+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:32.200+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:32.243+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:03:32.246+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:32.249+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:32.252+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:32.255+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:32.290+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:03:32.293+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:32.296+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:32.299+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:32.301+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:32.332+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:03:32.334+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:32.337+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:32.340+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:32.343+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:32.374+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:03:32.377+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:32.380+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:32.382+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:32.386+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:32.417+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:03:32.421+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:32.423+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:32.427+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:32.430+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:32.453+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:03:32.456+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:32.458+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:32.461+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:32.463+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:32.488+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:03:32.492+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:32.494+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:32.496+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:32.499+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:32.528+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:03:32.530+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:32.532+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:32.535+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:32.537+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:32.963+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:03:32.965+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:03:33.248+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:03:33.250+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:33.518+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:03:33.520+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:33.741+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:03:33.743+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:33.965+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:03:33.966+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:34.192+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:03:34.193+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:34.436+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:03:34.438+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:34.668+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:03:34.670+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:34.672+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:03:35.780+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-07T02:03:35.784+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-07T02:03:35.786+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-07T02:03:35.788+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-07T02:03:35.842+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-07T02:03:36.652+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:03:36.682+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:03:36.701+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source sweden_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:03:37.596+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:03:38.661+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:03:39.202+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:03:39.205+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:39.209+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:39.212+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:39.218+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:39.278+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:03:39.285+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:39.288+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:39.292+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:39.295+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:39.350+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:03:39.352+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:39.355+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:39.357+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:39.360+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:39.399+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:03:39.401+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:39.404+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:39.406+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:39.409+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:39.460+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:03:39.462+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:39.466+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:39.469+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:39.472+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:39.534+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:03:39.537+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:39.540+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:39.543+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:39.547+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:39.606+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:03:39.612+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:39.617+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:39.625+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:39.629+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:39.701+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:03:39.704+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:39.707+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:39.709+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:39.713+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:39.755+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:03:39.759+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:39.761+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:39.764+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:39.766+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:39.826+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:03:39.830+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:39.834+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:39.838+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:39.860+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:40.028+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:03:40.033+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:40.039+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:40.044+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:40.055+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:40.145+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:03:40.149+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:40.153+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:40.158+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:40.161+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:40.264+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:03:40.268+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:40.273+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:40.289+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:40.295+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:40.350+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:03:40.354+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:40.358+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:40.361+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:40.366+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:40.423+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:03:40.426+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:40.429+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:40.432+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:40.435+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:40.495+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:03:40.498+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:40.501+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:40.504+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:40.509+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:40.577+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:03:40.582+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:03:40.585+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:03:40.598+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:03:40.601+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:03:41.174+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:03:41.177+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:03:41.874+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:03:41.882+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:42.703+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:03:42.713+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:43.358+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:03:43.361+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:44.151+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:03:44.155+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:45.192+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:03:45.203+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:46.056+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:03:46.070+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:47.136+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:03:47.155+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:03:47.180+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:03:48.837+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:03:48.896+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source oxford_policy. load_most_recent_loadable_data will return None.
[2023-11-07T02:04:26.514+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:04:37.796+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:04:52.693+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source our_world_in_data for date 2023-11-05
[2023-11-07T02:04:53.657+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:04:54.498+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-07T02:04:55.619+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:04:56.284+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-07T02:04:56.287+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.291+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.294+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.297+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:56.324+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-07T02:04:56.327+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.330+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.333+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.336+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:56.379+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-07T02:04:56.382+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.385+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.388+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.392+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:56.443+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-07T02:04:56.448+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.451+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.461+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.465+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:56.521+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-07T02:04:56.524+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.529+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.533+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.537+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:56.577+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-07T02:04:56.580+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.583+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.586+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.588+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:56.618+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-07T02:04:56.620+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.623+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.625+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.628+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:56.666+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-07T02:04:56.668+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.671+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.673+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.676+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:56.707+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-07T02:04:56.710+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.712+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.716+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.719+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:56.756+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-07T02:04:56.759+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.763+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.766+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.770+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:56.809+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-07T02:04:56.812+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.815+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.818+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.822+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:56.861+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-07T02:04:56.864+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.866+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.869+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.872+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:56.902+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-07T02:04:56.906+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.909+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.913+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.917+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:56.953+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-07T02:04:56.956+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:56.960+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:56.964+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:56.967+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:57.005+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-07T02:04:57.008+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:57.011+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:57.014+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:57.018+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:57.074+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-07T02:04:57.078+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:57.082+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:57.085+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:57.090+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:57.154+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-07T02:04:57.156+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:04:57.159+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:57.162+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:57.176+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:57.658+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-07T02:04:58.130+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-23
[2023-11-07T02:04:58.134+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.138+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.141+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.145+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.200+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-09
[2023-11-07T02:04:58.203+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.205+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.209+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.212+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.240+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-18
[2023-11-07T02:04:58.243+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.245+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.248+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.252+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.273+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-11
[2023-11-07T02:04:58.275+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.277+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.278+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.280+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.305+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-09
[2023-11-07T02:04:58.307+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.309+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.311+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.313+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.329+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-29
[2023-11-07T02:04:58.331+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.333+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.334+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.336+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.354+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-14
[2023-11-07T02:04:58.355+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.357+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.359+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.361+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.379+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-07
[2023-11-07T02:04:58.381+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.384+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.386+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.388+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.404+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-04
[2023-11-07T02:04:58.405+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.407+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.409+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.410+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.433+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-30
[2023-11-07T02:04:58.434+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.435+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.437+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.439+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.456+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-27
[2023-11-07T02:04:58.458+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.459+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.461+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.462+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.484+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-22
[2023-11-07T02:04:58.486+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.487+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.489+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.491+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.517+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-17
[2023-11-07T02:04:58.520+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.522+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.523+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.525+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.554+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-09
[2023-11-07T02:04:58.556+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.558+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.560+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.562+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.581+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-02
[2023-11-07T02:04:58.583+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.586+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.589+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.591+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.609+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-31
[2023-11-07T02:04:58.611+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.613+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.614+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.617+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.645+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-25
[2023-11-07T02:04:58.648+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:04:58.650+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:04:58.652+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:04:58.655+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:04:58.957+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source ireland_hospitalizations for date 2020-08-04
[2023-11-07T02:05:00.866+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-07T02:05:00.869+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:05:02.344+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-07T02:05:02.346+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:05:03.380+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-07T02:05:03.383+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:05:04.213+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-07T02:05:04.215+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:05:04.228+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:05:04.420+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:05:04.422+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.424+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.426+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.429+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.447+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:05:04.449+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.452+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.454+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.456+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.490+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:05:04.492+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.494+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.496+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.498+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.535+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:05:04.537+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.539+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.542+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.545+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.574+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:05:04.576+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.578+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.580+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.582+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.615+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:05:04.618+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.620+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.622+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.624+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.667+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:05:04.673+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.675+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.677+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.680+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.710+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:05:04.713+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.714+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.716+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.718+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.741+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:05:04.743+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.745+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.747+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.749+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.770+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:05:04.772+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.774+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.776+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.778+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.799+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:05:04.801+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.803+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.805+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.807+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.828+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:05:04.830+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.832+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.834+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.835+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.859+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:05:04.861+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.863+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.865+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.867+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.891+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:05:04.893+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.895+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.897+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.899+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.928+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:05:04.930+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.933+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.935+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.937+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:04.970+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:05:04.973+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:04.975+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:04.978+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:04.980+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:05.004+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:05:05.006+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:05.008+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:05.011+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:05.012+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:05.378+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:05:05.380+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:05:05.651+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:05:05.653+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:05.918+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:05:05.921+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:06.213+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:05:06.216+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:06.428+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:05:06.431+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:06.670+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:05:06.671+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:06.879+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:05:06.882+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:07.097+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:05:07.099+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:07.102+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:05:07.611+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-07T02:05:07.614+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-07T02:05:07.616+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-07T02:05:07.618+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-07T02:05:07.651+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-07T02:05:08.000+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:05:08.025+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:05:08.338+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:05:08.340+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.343+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.344+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.346+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.369+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:05:08.371+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.372+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.374+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.378+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.404+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:05:08.406+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.409+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.411+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.415+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.432+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:05:08.434+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.437+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.439+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.443+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.461+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:05:08.463+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.465+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.468+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.470+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.487+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:05:08.489+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.491+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.493+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.495+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.516+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:05:08.519+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.521+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.524+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.527+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.549+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:05:08.551+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.553+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.556+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.559+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.581+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:05:08.583+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.585+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.588+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.591+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.615+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:05:08.617+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.620+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.623+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.625+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.647+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:05:08.648+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.650+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.652+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.654+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.679+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:05:08.681+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.683+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.686+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.688+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.705+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:05:08.706+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.708+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.710+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.713+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.732+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:05:08.734+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.737+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.739+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.742+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.761+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:05:08.763+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.765+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.767+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.770+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.798+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:05:08.801+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.803+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.805+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.807+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:08.834+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:05:08.838+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:08.840+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:08.843+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:08.845+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:09.113+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:05:09.115+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:05:09.417+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:05:09.420+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:09.687+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:05:09.689+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:09.925+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:05:09.926+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:10.128+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:05:10.130+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:10.342+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:05:10.344+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:10.604+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:05:10.607+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:10.839+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:05:10.841+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:10.843+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:05:11.394+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:05:11.957+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source czech_republic_hospitalizations for date 2020-12-23
[2023-11-07T02:05:12.697+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:05:13.004+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-23
[2023-11-07T02:05:13.006+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.007+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.009+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.010+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.029+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-12-09
[2023-11-07T02:05:13.032+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.034+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.037+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.040+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.059+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-18
[2023-11-07T02:05:13.060+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.061+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.063+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.065+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.088+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-11
[2023-11-07T02:05:13.090+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.092+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.094+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.096+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.119+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-11-09
[2023-11-07T02:05:13.122+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.124+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.127+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.130+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.156+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-29
[2023-11-07T02:05:13.158+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.160+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.161+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.163+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.195+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-14
[2023-11-07T02:05:13.198+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.200+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.203+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.205+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.223+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-07
[2023-11-07T02:05:13.225+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.226+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.228+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.230+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.247+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-10-04
[2023-11-07T02:05:13.248+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.250+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.251+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.253+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.272+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-30
[2023-11-07T02:05:13.274+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.276+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.278+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.279+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.295+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-27
[2023-11-07T02:05:13.297+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.299+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.301+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.303+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.321+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-22
[2023-11-07T02:05:13.323+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.324+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.325+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.327+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.353+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-17
[2023-11-07T02:05:13.355+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.357+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.359+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.361+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.378+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-09
[2023-11-07T02:05:13.379+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.381+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.382+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.384+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.405+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-09-02
[2023-11-07T02:05:13.406+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.408+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.410+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.412+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.428+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-31
[2023-11-07T02:05:13.430+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.431+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.433+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.435+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.455+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source finland_hospitalizations for date 2020-08-25
[2023-11-07T02:05:13.456+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: time data "2020-0-14" doesn't match format "%Y-%m-%d %H:%M:%S", at position 52. You might want to try:
[2023-11-07T02:05:13.458+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.460+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.461+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.651+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source finland_hospitalizations for date 2020-08-04
[2023-11-07T02:05:13.915+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-23
[2023-11-07T02:05:13.917+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:13.918+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.919+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.921+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.936+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-12-09
[2023-11-07T02:05:13.938+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:13.939+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.940+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.942+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.961+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-18
[2023-11-07T02:05:13.963+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:13.964+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.966+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.968+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:13.984+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-11
[2023-11-07T02:05:13.986+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:13.989+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:13.990+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:13.992+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.012+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-11-09
[2023-11-07T02:05:14.014+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:14.016+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:14.018+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:14.019+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.036+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-29
[2023-11-07T02:05:14.037+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:14.039+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:14.041+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:14.042+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.057+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-14
[2023-11-07T02:05:14.059+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:14.060+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:14.062+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:14.063+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.080+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-07
[2023-11-07T02:05:14.081+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:14.082+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:14.083+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:14.084+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.101+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-10-04
[2023-11-07T02:05:14.103+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:14.106+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:14.107+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:14.109+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.126+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-30
[2023-11-07T02:05:14.128+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:14.129+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:14.130+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:14.132+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.152+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-27
[2023-11-07T02:05:14.154+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:14.156+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:14.157+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:14.158+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.175+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-22
[2023-11-07T02:05:14.176+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:14.177+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:14.178+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:14.179+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.195+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-17
[2023-11-07T02:05:14.196+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:14.197+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:14.198+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:14.199+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.216+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-09
[2023-11-07T02:05:14.217+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:14.217+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:14.218+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:14.220+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.235+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-09-02
[2023-11-07T02:05:14.237+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:14.238+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:14.239+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:14.240+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.255+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-31
[2023-11-07T02:05:14.256+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:14.257+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:14.258+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:14.259+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.274+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source ireland_hospitalizations for date 2020-08-25
[2023-11-07T02:05:14.275+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 160. You might want to try:
[2023-11-07T02:05:14.276+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:14.277+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:14.278+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:14.457+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source ireland_hospitalizations for date 2020-08-04
[2023-11-07T02:05:15.028+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-07
[2023-11-07T02:05:15.029+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:05:15.593+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-06
[2023-11-07T02:05:15.595+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:05:16.324+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-05
[2023-11-07T02:05:16.326+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:05:17.051+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source italy_and_regions for date 2023-11-04
[2023-11-07T02:05:17.052+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: 'DataFrame' object has no attribute 'append'
[2023-11-07T02:05:17.058+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source italy_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:05:17.421+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:05:17.423+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.424+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.426+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.427+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.449+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:05:17.451+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.452+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.454+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.455+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.479+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:05:17.481+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.482+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.484+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.485+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.511+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:05:17.513+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.514+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.516+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.518+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.545+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:05:17.547+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.549+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.551+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.553+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.577+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:05:17.579+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.581+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.583+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.585+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.607+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:05:17.609+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.610+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.612+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.613+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.635+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:05:17.636+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.638+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.640+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.641+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.660+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:05:17.661+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.663+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.664+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.666+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.684+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:05:17.685+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.687+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.688+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.689+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.707+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:05:17.709+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.710+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.712+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.714+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.736+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:05:17.739+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.740+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.742+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.744+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.769+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:05:17.770+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.772+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.774+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.776+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.799+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:05:17.801+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.802+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.804+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.806+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.825+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:05:17.827+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.829+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.830+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.831+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.853+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:05:17.855+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.856+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.858+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.859+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:17.879+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:05:17.880+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:17.881+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:17.883+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:17.884+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:18.055+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:05:18.057+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:05:18.274+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:05:18.275+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:18.472+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:05:18.473+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:18.719+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:05:18.720+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:18.921+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:05:18.923+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:19.197+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:05:19.199+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:19.514+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:05:19.517+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:19.797+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:05:19.799+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:19.801+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:05:20.441+0000] {subprocess.py:93} INFO - WARNING:root:Dropping the following duplicate data for new_zealand_hospitalizations data source:
[2023-11-07T02:05:20.442+0000] {subprocess.py:93} INFO -   region_code        date
[2023-11-07T02:05:20.444+0000] {subprocess.py:93} INFO - 1         NZL  2020-05-01
[2023-11-07T02:05:20.446+0000] {subprocess.py:93} INFO - 2         NZL  2020-05-01
[2023-11-07T02:05:20.480+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source new_zealand_hospitalizations for date 2020-12-23
[2023-11-07T02:05:21.028+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:05:21.047+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source spain_and_regions. load_most_recent_loadable_data will return None.
[2023-11-07T02:05:21.060+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source sweden_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:05:21.755+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source australia_hospitalizations for date 2020-12-23
[2023-11-07T02:05:23.052+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source denmark_hospitalizations for date 2020-12-23
[2023-11-07T02:05:23.703+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-23
[2023-11-07T02:05:23.705+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:23.707+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:23.711+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:23.713+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:23.755+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-12-09
[2023-11-07T02:05:23.757+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:23.760+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:23.762+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:23.766+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:23.810+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-18
[2023-11-07T02:05:23.813+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:23.815+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:23.818+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:23.821+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:23.859+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-11
[2023-11-07T02:05:23.862+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:23.864+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:23.866+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:23.869+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:23.911+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-11-09
[2023-11-07T02:05:23.914+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:23.917+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:23.920+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:23.923+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:23.973+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-29
[2023-11-07T02:05:23.976+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:23.978+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:23.981+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:23.984+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:24.028+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-14
[2023-11-07T02:05:24.031+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:24.034+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:24.037+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:24.041+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:24.075+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-07
[2023-11-07T02:05:24.078+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:24.081+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:24.083+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:24.086+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:24.126+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-10-04
[2023-11-07T02:05:24.129+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:24.132+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:24.134+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:24.137+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:24.176+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-30
[2023-11-07T02:05:24.179+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:24.182+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:24.185+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:24.187+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:24.227+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-27
[2023-11-07T02:05:24.231+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:24.234+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:24.238+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:24.241+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:24.284+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-22
[2023-11-07T02:05:24.288+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:24.291+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:24.294+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:24.297+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:24.339+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-17
[2023-11-07T02:05:24.342+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:24.345+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:24.349+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:24.352+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:24.396+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-09
[2023-11-07T02:05:24.399+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:24.402+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:24.405+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:24.408+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:24.443+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-09-02
[2023-11-07T02:05:24.446+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:24.448+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:24.451+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:24.453+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:24.501+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-31
[2023-11-07T02:05:24.504+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:24.506+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:24.509+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:24.511+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:24.564+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-25
[2023-11-07T02:05:24.567+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: Out of bounds nanosecond timestamp: 2920-08-23 00:00:00, at position 144. You might want to try:
[2023-11-07T02:05:24.571+0000] {subprocess.py:93} INFO -     - passing `format` if your strings have a consistent format;
[2023-11-07T02:05:24.574+0000] {subprocess.py:93} INFO -     - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;
[2023-11-07T02:05:24.591+0000] {subprocess.py:93} INFO -     - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.
[2023-11-07T02:05:25.066+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-08-04
[2023-11-07T02:05:25.069+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: incompatible index of inserted column with frame index
[2023-11-07T02:05:25.498+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-30
[2023-11-07T02:05:25.501+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:25.826+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-19
[2023-11-07T02:05:25.829+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:26.189+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-15
[2023-11-07T02:05:26.191+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:26.539+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-12
[2023-11-07T02:05:26.542+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:26.872+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-05
[2023-11-07T02:05:26.874+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:27.281+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-07-01
[2023-11-07T02:05:27.284+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:27.602+0000] {subprocess.py:93} INFO - WARNING:root:Loading failed on source moldova_hospitalizations for date 2020-06-28
[2023-11-07T02:05:27.614+0000] {subprocess.py:93} INFO - WARNING:root:    with Exception: unsupported operand type(s) for +: 'float' and 'str'
[2023-11-07T02:05:27.616+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source moldova_hospitalizations. load_most_recent_loadable_data will return None.
[2023-11-07T02:05:28.279+0000] {subprocess.py:93} INFO - WARNING:root:Loading succeeded on source philippines_hospitalizations for date 2020-12-23
[2023-11-07T02:05:28.309+0000] {subprocess.py:93} INFO - ERROR:root:Loading failed for all subdirs for source oxford_policy. load_most_recent_loadable_data will return None.
[2023-11-07T02:06:14.906+0000] {subprocess.py:97} INFO - Command exited with return code -9
[2023-11-07T02:06:16.772+0000] {taskinstance.py:1937} ERROR - Task failed with exception
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/operators/bash.py", line 210, in execute
    raise AirflowException(
airflow.exceptions.AirflowException: Bash command failed. The command returned a non-zero exit code -9.
[2023-11-07T02:06:17.013+0000] {taskinstance.py:1400} INFO - Marking task as UP_FOR_RETRY. dag_id=export_google_data_v02, task_id=3rd_task, execution_date=20231107T012011, start_date=20231107T020139, end_date=20231107T020616
[2023-11-07T02:06:17.924+0000] {standard_task_runner.py:104} ERROR - Failed to execute job 306 for task 3rd_task (Bash command failed. The command returned a non-zero exit code -9.; 13418)
[2023-11-07T02:06:18.107+0000] {local_task_job_runner.py:228} INFO - Task exited with return code 1
[2023-11-07T02:06:18.665+0000] {taskinstance.py:2778} INFO - 0 downstream tasks scheduled from follow-on schedule check
